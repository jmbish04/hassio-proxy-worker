{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/compose.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/request/constants.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/utils/body.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/utils/url.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/request.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/utils/html.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/context.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/router.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/utils/constants.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/hono-base.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/router/reg-exp-router/node.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/router/reg-exp-router/trie.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/router/reg-exp-router/router.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/router/smart-router/router.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/router/trie-router/node.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/router/trie-router/router.js", "../../../node_modules/.pnpm/hono@4.9.4/node_modules/hono/dist/hono.js", "../../../src/lib/logger.ts", "../../../src/lib/brain.ts", "../../../src/lib/homeAssistantWs.ts", "../../../src/lib/homeAssistant.ts", "../../../src/lib/logProcessor.ts", "../../../src/lib/response.ts", "../../../src/routes/v1.ts", "../../../src/durable-objects/homeAssistant.ts", "../../../src/index.ts", "../../../node_modules/.pnpm/wrangler@4.32.0_@cloudflare+workers-types@4.20250823.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/.pnpm/wrangler@4.32.0_@cloudflare+workers-types@4.20250823.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-QAtZyj/middleware-insertion-facade.js", "../../../node_modules/.pnpm/wrangler@4.32.0_@cloudflare+workers-types@4.20250823.0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-QAtZyj/middleware-loader.entry.ts"],
  "sourceRoot": "/Volumes/Projects/workers/hassio-proxy-worker/.wrangler/tmp/dev-yrxIsH",
  "sourcesContent": ["// src/compose.ts\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        context.req.routeIndex = i;\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (handler) {\n        try {\n          res = await handler(context, () => dispatch(i + 1));\n        } catch (err) {\n          if (err instanceof Error && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        if (context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "// src/request/constants.ts\nvar GET_MATCH_RESULT = Symbol();\nexport {\n  GET_MATCH_RESULT\n};\n", "// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {\n  const { all = false, dot = false } = options;\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (contentType?.startsWith(\"multipart/form-data\") || contentType?.startsWith(\"application/x-www-form-urlencoded\")) {\n    return parseFormData(request, { all, dot });\n  }\n  return {};\n};\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = /* @__PURE__ */ Object.create(null);\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  if (options.dot) {\n    Object.entries(form).forEach(([key, value]) => {\n      const shouldParseDotValues = key.includes(\".\");\n      if (shouldParseDotValues) {\n        handleParsingNestedValues(form, key, value);\n        delete form[key];\n      }\n    });\n  }\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] !== void 0) {\n    if (Array.isArray(form[key])) {\n      ;\n      form[key].push(value);\n    } else {\n      form[key] = [form[key], value];\n    }\n  } else {\n    if (!key.endsWith(\"[]\")) {\n      form[key] = value;\n    } else {\n      form[key] = [value];\n    }\n  }\n};\nvar handleParsingNestedValues = (form, key, value) => {\n  let nestedForm = form;\n  const keys = key.split(\".\");\n  keys.forEach((key2, index) => {\n    if (index === keys.length - 1) {\n      nestedForm[key2] = value;\n    } else {\n      if (!nestedForm[key2] || typeof nestedForm[key2] !== \"object\" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {\n        nestedForm[key2] = /* @__PURE__ */ Object.create(null);\n      }\n      nestedForm = nestedForm[key2];\n    }\n  });\n};\nexport {\n  parseBody\n};\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label, next) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    const cacheKey = `${label}#${next}`;\n    if (!patternCache[cacheKey]) {\n      if (match[2]) {\n        patternCache[cacheKey] = next && next[0] !== \":\" && next[0] !== \"*\" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];\n      } else {\n        patternCache[cacheKey] = [label, match[1], true];\n      }\n    }\n    return patternCache[cacheKey];\n  }\n  return null;\n};\nvar tryDecode = (str, decoder) => {\n  try {\n    return decoder(str);\n  } catch {\n    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {\n      try {\n        return decoder(match);\n      } catch {\n        return match;\n      }\n    });\n  }\n};\nvar tryDecodeURI = (str) => tryDecode(str, decodeURI);\nvar getPath = (request) => {\n  const url = request.url;\n  const start = url.indexOf(\n    \"/\",\n    url.charCodeAt(9) === 58 ? 13 : 8\n  );\n  let i = start;\n  for (; i < url.length; i++) {\n    const charCode = url.charCodeAt(i);\n    if (charCode === 37) {\n      const queryIndex = url.indexOf(\"?\", i);\n      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);\n      return tryDecodeURI(path.includes(\"%25\") ? path.replace(/%25/g, \"%2525\") : path);\n    } else if (charCode === 63) {\n      break;\n    }\n  }\n  return url.slice(start, i);\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result.at(-1) === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (base, sub, ...rest) => {\n  if (rest.length) {\n    sub = mergePath(sub, ...rest);\n  }\n  return `${base?.[0] === \"/\" ? \"\" : \"/\"}${base}${sub === \"/\" ? \"\" : `${base?.at(-1) === \"/\" ? \"\" : \"/\"}${sub?.[0] === \"/\" ? sub.slice(1) : sub}`}`;\n};\nvar checkOptionalParameter = (path) => {\n  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(\":\")) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return value.indexOf(\"%\") !== -1 ? tryDecode(value, decodeURIComponent_) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ??= /[%+]/.test(url);\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ??= value;\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath,\n  tryDecode\n};\n", "// src/request.ts\nimport { GET_MATCH_RESULT } from \"./request/constants.js\";\nimport { parseBody } from \"./utils/body.js\";\nimport { decodeURIComponent_, getQueryParam, getQueryParams, tryDecode } from \"./utils/url.js\";\nvar tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);\nvar HonoRequest = class {\n  raw;\n  #validatedData;\n  #matchResult;\n  routeIndex = 0;\n  path;\n  bodyCache = {};\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    this.raw = request;\n    this.path = path;\n    this.#matchResult = matchResult;\n    this.#validatedData = {};\n  }\n  param(key) {\n    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();\n  }\n  #getDecodedParam(key) {\n    const paramKey = this.#matchResult[0][this.routeIndex][1][key];\n    const param = this.#getParamValue(paramKey);\n    return param ? /\\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;\n  }\n  #getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);\n      if (value && typeof value === \"string\") {\n        decoded[key] = /\\%/.test(value) ? tryDecodeURIComponent(value) : value;\n      }\n    }\n    return decoded;\n  }\n  #getParamValue(paramKey) {\n    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    return this.bodyCache.parsedBody ??= await parseBody(this, options);\n  }\n  #cachedBody = (key) => {\n    const { bodyCache, raw } = this;\n    const cachedBody = bodyCache[key];\n    if (cachedBody) {\n      return cachedBody;\n    }\n    const anyCachedKey = Object.keys(bodyCache)[0];\n    if (anyCachedKey) {\n      return bodyCache[anyCachedKey].then((body) => {\n        if (anyCachedKey === \"json\") {\n          body = JSON.stringify(body);\n        }\n        return new Response(body)[key]();\n      });\n    }\n    return bodyCache[key] = raw[key]();\n  };\n  json() {\n    return this.#cachedBody(\"text\").then((text) => JSON.parse(text));\n  }\n  text() {\n    return this.#cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.#cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.#cachedBody(\"blob\");\n  }\n  formData() {\n    return this.#cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    this.#validatedData[target] = data;\n  }\n  valid(target) {\n    return this.#validatedData[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get [GET_MATCH_RESULT]() {\n    return this.#matchResult;\n  }\n  get matchedRoutes() {\n    return this.#matchResult[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\nexport {\n  HonoRequest\n};\n", "// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer, callbacks) => {\n  let str = \"\";\n  callbacks ||= [];\n  const resolvedBuffer = await Promise.all(buffer);\n  for (let i = resolvedBuffer.length - 1; ; i--) {\n    str += resolvedBuffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = resolvedBuffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallbackSync = (str) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return str;\n  }\n  const buffer = [str];\n  const context = {};\n  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));\n  return buffer[0];\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  if (typeof str === \"object\" && !(str instanceof String)) {\n    if (!(str instanceof Promise)) {\n      str = str.toString();\n    }\n    if (str instanceof Promise) {\n      str = await str;\n    }\n  }\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  resolveCallbackSync,\n  stringBufferToString\n};\n", "// src/context.ts\nimport { HonoRequest } from \"./request.js\";\nimport { HtmlEscapedCallbackPhase, resolveCallback } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setDefaultContentType = (contentType, headers) => {\n  return {\n    \"Content-Type\": contentType,\n    ...headers\n  };\n};\nvar Context = class {\n  #rawRequest;\n  #req;\n  env = {};\n  #var;\n  finalized = false;\n  error;\n  #status;\n  #executionCtx;\n  #res;\n  #layout;\n  #renderer;\n  #notFoundHandler;\n  #preparedHeaders;\n  #matchResult;\n  #path;\n  constructor(req, options) {\n    this.#rawRequest = req;\n    if (options) {\n      this.#executionCtx = options.executionCtx;\n      this.env = options.env;\n      this.#notFoundHandler = options.notFoundHandler;\n      this.#path = options.path;\n      this.#matchResult = options.matchResult;\n    }\n  }\n  get req() {\n    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);\n    return this.#req;\n  }\n  get event() {\n    if (this.#executionCtx && \"respondWith\" in this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    return this.#res ||= new Response(null, {\n      headers: this.#preparedHeaders ??= new Headers()\n    });\n  }\n  set res(_res) {\n    if (this.#res && _res) {\n      _res = new Response(_res.body, _res);\n      for (const [k, v] of this.#res.headers.entries()) {\n        if (k === \"content-type\") {\n          continue;\n        }\n        if (k === \"set-cookie\") {\n          const cookies = this.#res.headers.getSetCookie();\n          _res.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res.headers.set(k, v);\n        }\n      }\n    }\n    this.#res = _res;\n    this.finalized = true;\n  }\n  render = (...args) => {\n    this.#renderer ??= (content) => this.html(content);\n    return this.#renderer(...args);\n  };\n  setLayout = (layout) => this.#layout = layout;\n  getLayout = () => this.#layout;\n  setRenderer = (renderer) => {\n    this.#renderer = renderer;\n  };\n  header = (name, value, options) => {\n    if (this.finalized) {\n      this.#res = new Response(this.#res.body, this.#res);\n    }\n    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();\n    if (value === void 0) {\n      headers.delete(name);\n    } else if (options?.append) {\n      headers.append(name, value);\n    } else {\n      headers.set(name, value);\n    }\n  };\n  status = (status) => {\n    this.#status = status;\n  };\n  set = (key, value) => {\n    this.#var ??= /* @__PURE__ */ new Map();\n    this.#var.set(key, value);\n  };\n  get = (key) => {\n    return this.#var ? this.#var.get(key) : void 0;\n  };\n  get var() {\n    if (!this.#var) {\n      return {};\n    }\n    return Object.fromEntries(this.#var);\n  }\n  #newResponse(data, arg, headers) {\n    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();\n    if (typeof arg === \"object\" && \"headers\" in arg) {\n      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);\n      for (const [key, value] of argHeaders) {\n        if (key.toLowerCase() === \"set-cookie\") {\n          responseHeaders.append(key, value);\n        } else {\n          responseHeaders.set(key, value);\n        }\n      }\n    }\n    if (headers) {\n      for (const [k, v] of Object.entries(headers)) {\n        if (typeof v === \"string\") {\n          responseHeaders.set(k, v);\n        } else {\n          responseHeaders.delete(k);\n          for (const v2 of v) {\n            responseHeaders.append(k, v2);\n          }\n        }\n      }\n    }\n    const status = typeof arg === \"number\" ? arg : arg?.status ?? this.#status;\n    return new Response(data, { status, headers: responseHeaders });\n  }\n  newResponse = (...args) => this.#newResponse(...args);\n  body = (data, arg, headers) => this.#newResponse(data, arg, headers);\n  text = (text, arg, headers) => {\n    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text) : this.#newResponse(\n      text,\n      arg,\n      setDefaultContentType(TEXT_PLAIN, headers)\n    );\n  };\n  json = (object, arg, headers) => {\n    return this.#newResponse(\n      JSON.stringify(object),\n      arg,\n      setDefaultContentType(\"application/json\", headers)\n    );\n  };\n  html = (html, arg, headers) => {\n    const res = (html2) => this.#newResponse(html2, arg, setDefaultContentType(\"text/html; charset=UTF-8\", headers));\n    return typeof html === \"object\" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);\n  };\n  redirect = (location, status) => {\n    const locationString = String(location);\n    this.header(\n      \"Location\",\n      !/[^\\x00-\\xFF]/.test(locationString) ? locationString : encodeURI(locationString)\n    );\n    return this.newResponse(null, status ?? 302);\n  };\n  notFound = () => {\n    this.#notFoundHandler ??= () => new Response();\n    return this.#notFoundHandler(this);\n  };\n};\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "// src/utils/constants.ts\nvar COMPOSED_HANDLER = \"__COMPOSED_HANDLER\";\nexport {\n  COMPOSED_HANDLER\n};\n", "// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { METHODS, METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE } from \"./router.js\";\nimport { COMPOSED_HANDLER } from \"./utils/constants.js\";\nimport { getPath, getPathNoStrict, mergePath } from \"./utils/url.js\";\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (\"getResponse\" in err) {\n    const res = err.getResponse();\n    return c.newResponse(res.body, res);\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar Hono = class {\n  get;\n  post;\n  put;\n  delete;\n  options;\n  patch;\n  all;\n  on;\n  use;\n  router;\n  getPath;\n  _basePath = \"/\";\n  #path = \"/\";\n  routes = [];\n  constructor(options = {}) {\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.forEach((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          this.#path = args1;\n        } else {\n          this.#addRoute(method, this.#path, args1);\n        }\n        args.forEach((handler) => {\n          this.#addRoute(method, this.#path, handler);\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      for (const p of [path].flat()) {\n        this.#path = p;\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.#addRoute(m.toUpperCase(), this.#path, handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        this.#path = arg1;\n      } else {\n        this.#path = \"*\";\n        handlers.unshift(arg1);\n      }\n      handlers.forEach((handler) => {\n        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);\n      });\n      return this;\n    };\n    const { strict, ...optionsWithoutStrict } = options;\n    Object.assign(this, optionsWithoutStrict);\n    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  #clone() {\n    const clone = new Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.errorHandler = this.errorHandler;\n    clone.#notFoundHandler = this.#notFoundHandler;\n    clone.routes = this.routes;\n    return clone;\n  }\n  #notFoundHandler = notFoundHandler;\n  errorHandler = errorHandler;\n  route(path, app) {\n    const subApp = this.basePath(path);\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.#addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.#clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  onError = (handler) => {\n    this.errorHandler = handler;\n    return this;\n  };\n  notFound = (handler) => {\n    this.#notFoundHandler = handler;\n    return this;\n  };\n  mount(path, applicationHandler, options) {\n    let replaceRequest;\n    let optionHandler;\n    if (options) {\n      if (typeof options === \"function\") {\n        optionHandler = options;\n      } else {\n        optionHandler = options.optionHandler;\n        if (options.replaceRequest === false) {\n          replaceRequest = (request) => request;\n        } else {\n          replaceRequest = options.replaceRequest;\n        }\n      }\n    }\n    const getOptions = optionHandler ? (c) => {\n      const options2 = optionHandler(c);\n      return Array.isArray(options2) ? options2 : [options2];\n    } : (c) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      return [c.env, executionContext];\n    };\n    replaceRequest ||= (() => {\n      const mergedPath = mergePath(this._basePath, path);\n      const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n      return (request) => {\n        const url = new URL(request.url);\n        url.pathname = url.pathname.slice(pathPrefixLength) || \"/\";\n        return new Request(url, request);\n      };\n    })();\n    const handler = async (c, next) => {\n      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.#addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  #addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { basePath: this._basePath, path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  #handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  #dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.router.match(method, path);\n    const c = new Context(request, {\n      path,\n      matchResult,\n      env,\n      executionCtx,\n      notFoundHandler: this.#notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.#notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))\n      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. Did you forget to return a Response object or `await next()`?\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n    })();\n  }\n  fetch = (request, ...rest) => {\n    return this.#dispatch(request, rest[1], rest[0], request.method);\n  };\n  request = (input, requestInit, Env, executionCtx) => {\n    if (input instanceof Request) {\n      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);\n    }\n    input = input.toString();\n    return this.fetch(\n      new Request(\n        /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`,\n        requestInit\n      ),\n      Env,\n      executionCtx\n    );\n  };\n  fire = () => {\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));\n    });\n  };\n};\nexport {\n  Hono as HonoBase\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nvar regExpMetaChars = new Set(\".\\\\+*[^]$()\");\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  #index;\n  #varIndex;\n  #children = /* @__PURE__ */ Object.create(null);\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.#index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.#index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        if (regexpStr === \".*\") {\n          throw PATH_ERROR;\n        }\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.#children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.#varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.#varIndex]);\n      }\n    } else {\n      node = this.#children[token];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.#children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.#children[k];\n      return (typeof c.#varIndex === \"number\" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\\\${k}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.#index === \"number\") {\n      strList.unshift(`#${this.#index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  #context = { varIndex: 0 };\n  #root = new Node();\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.#root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (handlerIndex !== void 0) {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (paramIndex !== void 0) {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHOD_NAME_ALL,\n  UnsupportedPathError\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];\nvar wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ??= new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(\n      /\\/\\*$|([.\\\\+*[^\\]$()])/g,\n      (_, metaChar) => metaChar ? `\\\\${metaChar}` : \"(?:|/.*)\"\n    )}$`\n  );\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = /* @__PURE__ */ Object.create(null);\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = /* @__PURE__ */ Object.create(null);\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  name = \"RegExpRouter\";\n  #middleware;\n  #routes;\n  constructor() {\n    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n  }\n  add(method, path, handler) {\n    const middleware = this.#middleware;\n    const routes = this.#routes;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = /* @__PURE__ */ Object.create(null);\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n        });\n      } else {\n        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          routes[m][path2] ||= [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ];\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.#buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  #buildAllMatchers() {\n    const matchers = /* @__PURE__ */ Object.create(null);\n    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {\n      matchers[method] ||= this.#buildMatcher(method);\n    });\n    this.#middleware = this.#routes = void 0;\n    return matchers;\n  }\n  #buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.#middleware, this.#routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute ||= true;\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/smart-router/router.ts\nimport { MESSAGE_MATCHER_IS_ALREADY_BUILT, UnsupportedPathError } from \"../../router.js\";\nvar SmartRouter = class {\n  name = \"SmartRouter\";\n  #routers = [];\n  #routes = [];\n  constructor(init) {\n    this.#routers = init.routers;\n  }\n  add(method, path, handler) {\n    if (!this.#routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.#routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.#routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const routers = this.#routers;\n    const routes = this.#routes;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {\n          router.add(...routes[i2]);\n        }\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.#routers = [router];\n      this.#routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.#routes || this.#routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.#routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { getPattern, splitPath, splitRoutingPath } from \"../../utils/url.js\";\nvar emptyParams = /* @__PURE__ */ Object.create(null);\nvar Node = class {\n  #methods;\n  #children;\n  #patterns;\n  #order = 0;\n  #params = emptyParams;\n  constructor(method, handler, children) {\n    this.#children = children || /* @__PURE__ */ Object.create(null);\n    this.#methods = [];\n    if (method && handler) {\n      const m = /* @__PURE__ */ Object.create(null);\n      m[method] = { handler, possibleKeys: [], score: 0 };\n      this.#methods = [m];\n    }\n    this.#patterns = [];\n  }\n  insert(method, path, handler) {\n    this.#order = ++this.#order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      const nextP = parts[i + 1];\n      const pattern = getPattern(p, nextP);\n      const key = Array.isArray(pattern) ? pattern[0] : p;\n      if (key in curNode.#children) {\n        curNode = curNode.#children[key];\n        if (pattern) {\n          possibleKeys.push(pattern[1]);\n        }\n        continue;\n      }\n      curNode.#children[key] = new Node();\n      if (pattern) {\n        curNode.#patterns.push(pattern);\n        possibleKeys.push(pattern[1]);\n      }\n      curNode = curNode.#children[key];\n    }\n    curNode.#methods.push({\n      [method]: {\n        handler,\n        possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n        score: this.#order\n      }\n    });\n    return curNode;\n  }\n  #getHandlerSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.#methods.length; i < len; i++) {\n      const m = node.#methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = /* @__PURE__ */ Object.create(null);\n        handlerSets.push(handlerSet);\n        if (nodeParams !== emptyParams || params && params !== emptyParams) {\n          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {\n            const key = handlerSet.possibleKeys[i2];\n            const processed = processedSet[handlerSet.score];\n            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];\n            processedSet[handlerSet.score] = true;\n          }\n        }\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.#params = emptyParams;\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    const curNodesQueue = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.#children[part];\n        if (nextNode) {\n          nextNode.#params = node.#params;\n          if (isLast) {\n            if (nextNode.#children[\"*\"]) {\n              handlerSets.push(\n                ...this.#getHandlerSets(nextNode.#children[\"*\"], method, node.#params)\n              );\n            }\n            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {\n          const pattern = node.#patterns[k];\n          const params = node.#params === emptyParams ? {} : { ...node.#params };\n          if (pattern === \"*\") {\n            const astNode = node.#children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));\n              astNode.#params = params;\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          if (!part && !(matcher instanceof RegExp)) {\n            continue;\n          }\n          const child = node.#children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp) {\n            const m = matcher.exec(restPathString);\n            if (m) {\n              params[name] = m[0];\n              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));\n              if (Object.keys(child.#children).length) {\n                child.#params = params;\n                const componentCount = m[0].match(/\\//)?.length ?? 0;\n                const targetCurNodes = curNodesQueue[componentCount] ||= [];\n                targetCurNodes.push(child);\n              }\n              continue;\n            }\n          }\n          if (matcher === true || matcher.test(part)) {\n            params[name] = part;\n            if (isLast) {\n              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));\n              if (child.#children[\"*\"]) {\n                handlerSets.push(\n                  ...this.#getHandlerSets(child.#children[\"*\"], method, params, node.#params)\n                );\n              }\n            } else {\n              child.#params = params;\n              tempNodes.push(child);\n            }\n          }\n        }\n      }\n      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);\n    }\n    if (handlerSets.length > 1) {\n      handlerSets.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n    return [handlerSets.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  name = \"TrieRouter\";\n  #node;\n  constructor() {\n    this.#node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (let i = 0, len = results.length; i < len; i++) {\n        this.#node.insert(method, results[i], handler);\n      }\n      return;\n    }\n    this.#node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.#node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "/**\n * @enum LogLevel\n * Defines the different levels of logging available.\n * The levels are ordered by severity, from DEBUG (least severe) to ERROR (most severe).\n */\nexport enum LogLevel {\n  /** Detailed debug information, useful for developers. */\n  DEBUG = 0,\n  /** General informational messages about application state. */\n  INFO = 1,\n  /** Warnings about potential issues that don't prevent the app from running. */\n  WARN = 2,\n  /** Errors that indicate a failure or critical issue. */\n  ERROR = 3,\n}\n\n/**\n * @let currentLevel\n * Stores the current logging threshold. Messages with a severity lower than this level will be ignored.\n * @type {LogLevel}\n */\nlet currentLevel: LogLevel = LogLevel.DEBUG;\n\n/**\n * Determines if a log message at a given level should be processed based on the current log level.\n * @param {LogLevel} level - The severity level of the message to check.\n * @returns {boolean} - True if the message level is greater than or equal to the current level, false otherwise.\n */\nfunction shouldLog(level: LogLevel): boolean {\n  return level >= currentLevel;\n}\n\n/**\n * Converts a LogLevel enum value into its string representation.\n * @param {LogLevel} level - The log level to format.\n * @returns {string} - The string name of the log level (e.g., 'DEBUG', 'INFO'). Returns 'LOG' for unknown levels.\n */\nfunction formatLevel(level: LogLevel): string {\n  const levelNames: Record<number, string> = {\n    [LogLevel.DEBUG]: 'DEBUG',\n    [LogLevel.INFO]: 'INFO',\n    [LogLevel.WARN]: 'WARN',\n    [LogLevel.ERROR]: 'ERROR',\n  };\n  return levelNames[level] || 'LOG';\n}\n\n/**\n * The core logging function that formats and outputs a message to the console if it meets the current log level.\n * @param {LogLevel} level - The severity level of the log message.\n * @param {unknown[]} args - The content of the log message, which can be any number of arguments of any type.\n */\nfunction log(level: LogLevel, ...args: unknown[]): void {\n  if (!shouldLog(level)) {\n    return;\n  }\n\n  const prefix = `[${formatLevel(level)}]`;\n  const consoleMethods: Record<number, (...data: any[]) => void> = {\n    [LogLevel.DEBUG]: console.debug,\n    [LogLevel.INFO]: console.info,\n    [LogLevel.WARN]: console.warn,\n    [LogLevel.ERROR]: console.error,\n  };\n\n  const logMethod = consoleMethods[level] || console.log;\n  logMethod(prefix, ...args);\n}\n\n/**\n * @const logger\n * The main logger object exported for use throughout the application.\n * It provides methods for logging at different levels and for setting the current log level.\n */\nexport const logger = {\n  /**\n   * Sets the minimum log level for messages to be displayed.\n   * @param {LogLevel} level - The new minimum log level.\n   */\n  setLevel(level: LogLevel) {\n    currentLevel = level;\n  },\n\n  /**\n   * Logs a message at the DEBUG level.\n   * @param {unknown[]} args - The content of the log message.\n   */\n  debug: (...args: unknown[]) => log(LogLevel.DEBUG, ...args),\n\n  /**\n   * Logs a message at the INFO level.\n   * @param {unknown[]} args - The content of the log message.\n   */\n  info: (...args: unknown[]) => log(LogLevel.INFO, ...args),\n\n  /**\n   * Logs a message at the WARN level.\n   * @param {unknown[]} args - The content of the log message.\n   */\n  warn: (...args: unknown[]) => log(LogLevel.WARN, ...args),\n\n  /**\n   * Logs a message at the ERROR level.\n   * @param {unknown[]} args - The content of the log message.\n   */\n  error: (...args: unknown[]) => log(LogLevel.ERROR, ...args),\n};\n", "/**\n * Home Assistant Agent Brain\n *\n * Responsible for normalizing entities and generating intent candidates\n * so that user-facing agents can interact naturally with Home Assistant.\n */\n\nimport { logger } from './logger';\n\nexport interface UnbrainedEntity {\n  id: string;\n  domain: string;\n  object_id: string;\n  friendly_name: string | null;\n}\n\nexport interface IntentCandidate {\n  label: string;\n  intent_kind: \"control\" | \"schedule\" | \"query\" | \"diagnostic\";\n  action_domain: string;\n  action_service: string;\n  action_data: Record<string, unknown>;\n  requires_caps?: string[];\n  confidence?: number;\n}\n\nexport interface BrainSweepResult {\n  ran_at_utc: string;\n  scanned: number;\n  normalized: number;\n  intentsCreated: number;\n}\n\n/**\n * Main brain sweep function - processes unbrained entities\n */\nexport async function brainSweep(db: D1Database): Promise<BrainSweepResult> {\n\tlogger.info(\"\uD83E\uDDE0 Brain sweep starting...\");\n\n\t// 1) Find entities with NO normalization or NO enabled intents\n\tconst unbrained = await selectUnbrainedEntities(db);\n\tlogger.debug(`Found ${unbrained.length} unbrained entities`);\n\n\t// 2) Process each entity: ensure normalization + intents\n\tlet normalized = 0;\n\tlet intentsCreated = 0;\n\n\tfor (const entity of unbrained) {\n\t\ttry {\n\t\t\tconst normed = await upsertNormalization(db, entity);\n\t\t\tif (normed) normalized++;\n\n\t\t\tconst added = await ensureIntents(db, entity);\n\t\t\tintentsCreated += added;\n\n\t\t\tlogger.debug(`Processed ${entity.id}: normalized=${normed}, intents_added=${added}`);\n\t\t} catch (error) {\n\t\t\tlogger.error(`Failed to process entity ${entity.id}:`, error);\n\t\t}\n\t}\n\n\tconst result = {\n\t\tran_at_utc: new Date().toISOString(),\n\t\tscanned: unbrained.length,\n\t\tnormalized,\n\t\tintentsCreated,\n\t};\n\n\t// Record the brain run in the database\n\ttry {\n\t\tawait db.prepare(`\n\t\t\tINSERT INTO brain_runs (ran_at_utc, scanned, normalized, intents_created)\n\t\t\tVALUES (?, ?, ?, ?)\n\t\t`).bind(result.ran_at_utc, result.scanned, result.normalized, result.intentsCreated).run();\n\t\tlogger.debug(\"Brain run recorded to database\");\n\t} catch (error) {\n\t\tlogger.error(\"Failed to record brain run:\", error);\n\t}\n\n\tlogger.info(`\uD83E\uDDE0 Brain sweep complete:`, result);\n\treturn result;\n}\n\n/**\n * Find entities that need normalization or intent generation\n */\nasync function selectUnbrainedEntities(db: D1Database): Promise<UnbrainedEntity[]> {\n  const sql = `\n    SELECT e.id, e.domain, e.object_id, e.friendly_name\n    FROM entities e\n    LEFT JOIN entity_normalization n ON n.entity_id = e.id\n    LEFT JOIN intent_candidates i ON i.entity_id = e.id AND i.enabled = 1\n    GROUP BY e.id, e.domain, e.object_id, e.friendly_name\n    HAVING n.entity_id IS NULL OR COUNT(i.id) < 5\n  `;\n\n  const res = await db.prepare(sql).all<UnbrainedEntity>();\n  return res.results ?? [];\n}\n\n/**\n * Upsert entity normalization record\n */\nasync function upsertNormalization(db: D1Database, entity: UnbrainedEntity): Promise<boolean> {\n  // Heuristic: treat \"switch.*\" that looks like a light as conceptual light\n  // (but KEEP domain=switch for HA calls)\n  const name = (entity.friendly_name ?? entity.object_id).toLowerCase();\n  const looksLikeLight = entity.domain === \"switch\" && /(light|lamp|bulb)/.test(name);\n  const looksLikeFan = entity.domain === \"switch\" && /(fan|ventilation)/.test(name);\n\n  let canonical_type = entity.domain;\n  let confidence = 0.9;\n  let reasoning = \"Default canonicalization equals HA domain.\";\n\n  if (looksLikeLight) {\n    canonical_type = \"light\";\n    confidence = 0.95;\n    reasoning = \"Name heuristic indicates a light; HA domain must remain 'switch' for service calls.\";\n  } else if (looksLikeFan) {\n    canonical_type = \"fan\";\n    confidence = 0.9;\n    reasoning = \"Name heuristic indicates a fan; HA domain must remain 'switch' for service calls.\";\n  }\n\n  const canonical_domain = entity.domain; // keep actual HA domain for service calls\n\n  const upsert = `\n    INSERT INTO entity_normalization (entity_id, canonical_type, canonical_domain, confidence, reasoning)\n    VALUES (?, ?, ?, ?, ?)\n    ON CONFLICT(entity_id) DO UPDATE SET\n      canonical_type=excluded.canonical_type,\n      canonical_domain=excluded.canonical_domain,\n      confidence=excluded.confidence,\n      reasoning=excluded.reasoning,\n      updated_at=CURRENT_TIMESTAMP\n  `;\n\n  try {\n    const result = await db.prepare(upsert).bind(\n      entity.id,\n      canonical_type,\n      canonical_domain,\n      confidence,\n      reasoning\n    ).run();\n    return result.success === true;\n  } catch (error) {\n    logger.error(`Failed to upsert normalization for ${entity.id}:`, error);\n    return false;\n  }\n}\n\n/**\n * Ensure entity has sufficient intent candidates (minimum 5)\n */\nasync function ensureIntents(db: D1Database, entity: UnbrainedEntity): Promise<number> {\n  // Don't duplicate if we already have >=5 intents\n  const countRes = await db\n    .prepare(`SELECT COUNT(*) AS c FROM intent_candidates WHERE entity_id=? AND enabled=1`)\n    .bind(entity.id)\n    .first<{ c: number }>();\n\n  if ((countRes?.c ?? 0) >= 5) {\n    logger.debug(`Entity ${entity.id} already has ${countRes?.c} intents, skipping`);\n    return 0;\n  }\n\n  // Look up basic capabilities if present\n  const caps = await loadEntityCapabilities(db, entity.id);\n  const intents = generateIntents(entity, caps);\n\n  let created = 0;\n  const insert = `\n    INSERT INTO intent_candidates\n      (entity_id, label, intent_kind, action_domain, action_service, action_data_json, requires_caps, confidence, enabled)\n    VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)\n  `;\n\n  for (const intent of intents) {\n    try {\n      await db.prepare(insert).bind(\n        entity.id,\n        intent.label,\n        intent.intent_kind,\n        intent.action_domain,\n        intent.action_service,\n        JSON.stringify(intent.action_data),\n        intent.requires_caps?.length ? JSON.stringify(intent.requires_caps) : null,\n        intent.confidence ?? 0.75\n      ).run();\n      created++;\n    } catch (error) {\n      logger.error(`Failed to insert intent for ${entity.id}:`, error);\n    }\n  }\n\n  return created;\n}\n\n/**\n * Load entity capabilities from database\n */\nasync function loadEntityCapabilities(db: D1Database, entityId: string): Promise<Record<string, string | number | boolean>> {\n  try {\n    const rows = await db\n      .prepare(`SELECT name, COALESCE(value_text, CAST(value_num AS TEXT)) AS v FROM entity_capabilities WHERE entity_id=?`)\n      .bind(entityId)\n      .all<{ name: string; v: string }>();\n\n    const caps: Record<string, string | number | boolean> = {};\n    for (const row of rows.results ?? []) {\n      // Parse bool/num if obvious\n      if (row.v === \"true\" || row.v === \"false\") {\n        caps[row.name] = row.v === \"true\";\n      } else if (!Number.isNaN(Number(row.v))) {\n        caps[row.name] = Number(row.v);\n      } else {\n        caps[row.name] = row.v;\n      }\n    }\n    return caps;\n  } catch (error) {\n    logger.error(`Failed to load capabilities for ${entityId}:`, error);\n    return {};\n  }\n}\n\n/**\n * Generate intent candidates for an entity based on its domain and capabilities\n */\nfunction generateIntents(\n  entity: UnbrainedEntity,\n  caps: Record<string, string | number | boolean>\n): IntentCandidate[] {\n  const labelName = entity.friendly_name ?? entity.object_id.replace(/_/g, \" \");\n  const entityId = entity.id;\n  const intents: IntentCandidate[] = [];\n\n  const add = (\n    label: string,\n    kind: \"control\" | \"schedule\" | \"query\" | \"diagnostic\",\n    service: string,\n    data: Record<string, unknown>,\n    requires_caps?: string[],\n    confidence = 0.8\n  ) => {\n    intents.push({\n      label,\n      intent_kind: kind,\n      action_domain: entity.domain, // always keep actual HA domain\n      action_service: service,\n      action_data: { entity_id: entityId, ...data },\n      requires_caps,\n      confidence\n    });\n  };\n\n  // Generate domain-specific intents\n  switch (entity.domain) {\n    case \"switch\":\n      add(`turn on ${labelName}`, \"control\", \"turn_on\", {});\n      add(`turn off ${labelName}`, \"control\", \"turn_off\", {});\n      add(`toggle ${labelName}`, \"control\", \"toggle\", {});\n      add(`turn off ${labelName} in 15 minutes`, \"schedule\", \"turn_off\", { delay: \"PT15M\" }, undefined, 0.75);\n      add(`turn on ${labelName} at dusk daily`, \"schedule\", \"turn_on\", { schedule: \"sunset_daily\" }, undefined, 0.72);\n      add(`check ${labelName} status`, \"query\", \"get_state\", {}, undefined, 0.7);\n      break;\n\n    case \"light\":\n      add(`turn on ${labelName}`, \"control\", \"turn_on\", {});\n      add(`turn off ${labelName}`, \"control\", \"turn_off\", {});\n      add(`toggle ${labelName}`, \"control\", \"toggle\", {});\n\n      if (caps.supports_brightness) {\n        add(`dim ${labelName} to 30%`, \"control\", \"turn_on\", { brightness_pct: 30 }, [\"supports_brightness\"]);\n        add(`set ${labelName} to 75%`, \"control\", \"turn_on\", { brightness_pct: 75 }, [\"supports_brightness\"]);\n        add(`brighten ${labelName}`, \"control\", \"turn_on\", { brightness_pct: 100 }, [\"supports_brightness\"]);\n      }\n\n      if (caps.supports_color) {\n        add(`set ${labelName} to red`, \"control\", \"turn_on\", { color_name: \"red\" }, [\"supports_color\"]);\n        add(`set ${labelName} to blue`, \"control\", \"turn_on\", { color_name: \"blue\" }, [\"supports_color\"]);\n      }\n\n      add(`turn off ${labelName} in 15 minutes`, \"schedule\", \"turn_off\", { delay: \"PT15M\" }, undefined, 0.75);\n      add(`turn on ${labelName} at dusk daily`, \"schedule\", \"turn_on\", { schedule: \"sunset_daily\" }, undefined, 0.72);\n      break;\n\n    case \"lock\":\n      add(`lock ${labelName}`, \"control\", \"lock\", {});\n      add(`unlock ${labelName}`, \"control\", \"unlock\", {});\n      add(`auto-lock ${labelName} after 5 minutes`, \"schedule\", \"lock\", { delay: \"PT5M\" }, undefined, 0.7);\n      add(`check ${labelName} lock status`, \"query\", \"get_state\", {}, undefined, 0.8);\n      break;\n\n    case \"camera\":\n      add(`show live stream for ${labelName}`, \"query\", \"play_stream\", { format: \"hls\" });\n      add(`snapshot ${labelName} now`, \"control\", \"snapshot\", { filename: `/tmp/${entity.object_id}_${Date.now()}.jpg` });\n      add(`notify me on motion for ${labelName}`, \"schedule\", \"automation_stub\", { template: \"camera_motion_notify\" }, undefined, 0.7);\n      add(`record ${labelName} for 30 seconds`, \"control\", \"record\", { duration: 30 }, undefined, 0.75);\n      add(`check ${labelName} status`, \"diagnostic\", \"get_state\", {}, undefined, 0.8);\n      break;\n\n    case \"sensor\":\n      add(`check ${labelName} reading`, \"query\", \"get_state\", {}, undefined, 0.9);\n      add(`show ${labelName} history`, \"query\", \"get_history\", { hours: 24 }, undefined, 0.8);\n      add(`alert me if ${labelName} exceeds threshold`, \"schedule\", \"automation_stub\", { template: \"sensor_threshold_alert\" }, undefined, 0.7);\n      break;\n\n    case \"climate\":\n      add(`set ${labelName} to 72\u00B0F`, \"control\", \"set_temperature\", { temperature: 72 });\n      add(`turn on ${labelName}`, \"control\", \"turn_on\", {});\n      add(`turn off ${labelName}`, \"control\", \"turn_off\", {});\n      add(`set ${labelName} to heat mode`, \"control\", \"set_hvac_mode\", { hvac_mode: \"heat\" });\n      add(`set ${labelName} to cool mode`, \"control\", \"set_hvac_mode\", { hvac_mode: \"cool\" });\n      add(`check ${labelName} temperature`, \"query\", \"get_state\", {}, undefined, 0.8);\n      break;\n\n    case \"fan\":\n      add(`turn on ${labelName}`, \"control\", \"turn_on\", {});\n      add(`turn off ${labelName}`, \"control\", \"turn_off\", {});\n      add(`set ${labelName} speed to low`, \"control\", \"set_percentage\", { percentage: 33 });\n      add(`set ${labelName} speed to high`, \"control\", \"set_percentage\", { percentage: 100 });\n      add(`oscillate ${labelName}`, \"control\", \"oscillate\", { oscillating: true });\n      break;\n\n    case \"cover\":\n      add(`open ${labelName}`, \"control\", \"open_cover\", {});\n      add(`close ${labelName}`, \"control\", \"close_cover\", {});\n      add(`stop ${labelName}`, \"control\", \"stop_cover\", {});\n      add(`set ${labelName} to 50%`, \"control\", \"set_cover_position\", { position: 50 });\n      add(`check ${labelName} position`, \"query\", \"get_state\", {}, undefined, 0.8);\n      break;\n\n    default:\n      // Generic intents for unknown domains\n      add(`turn on ${labelName}`, \"control\", \"turn_on\", {}, undefined, 0.6);\n      add(`turn off ${labelName}`, \"control\", \"turn_off\", {}, undefined, 0.6);\n      add(`check ${labelName} status`, \"query\", \"get_state\", {}, undefined, 0.7);\n      add(`toggle ${labelName}`, \"control\", \"toggle\", {}, undefined, 0.5);\n      add(`restart ${labelName}`, \"diagnostic\", \"reload\", {}, undefined, 0.4);\n      break;\n  }\n\n  // Ensure we have at least 5 intents but no more than 15\n  const minIntents = 5;\n  const maxIntents = 15;\n\n  // If we have too few intents, add some generic ones\n  while (intents.length < minIntents) {\n    const remaining = minIntents - intents.length;\n    if (remaining >= 1) add(`activate ${labelName}`, \"control\", \"turn_on\", {}, undefined, 0.5);\n    if (remaining >= 2) add(`deactivate ${labelName}`, \"control\", \"turn_off\", {}, undefined, 0.5);\n    if (remaining >= 3) add(`get ${labelName} info`, \"diagnostic\", \"get_state\", {}, undefined, 0.6);\n    if (remaining >= 4) add(`reset ${labelName}`, \"diagnostic\", \"reload\", {}, undefined, 0.4);\n    if (remaining >= 5) add(`monitor ${labelName}`, \"schedule\", \"automation_stub\", { template: \"entity_monitor\" }, undefined, 0.5);\n    break; // Prevent infinite loop\n  }\n\n  // Trim to maximum if we have too many\n  return intents.slice(0, maxIntents);\n}\n", "/**\n * Home Assistant WebSocket client for Cloudflare Workers.\n *\n * This client wraps the Home Assistant WebSocket API allowing any supported\n * command to be issued and responses awaited. It authenticates using\n * `env.HASSIO_TOKEN` and connects to the instance configured by\n * `env.HASSIO_ENDPOINT_URI`.\n */\n\nimport type { WorkerEnv } from '../index';\nimport { logger } from './logger';\n\ninterface PendingRequest<T = unknown> {\n  resolve: (value: T) => void;\n  reject: (reason?: unknown) => void;\n}\n\n/**\n * `HaWebSocketClient` manages a persistent authenticated WebSocket connection\n * to a Home Assistant instance. Messages are automatically given unique IDs and\n * the corresponding responses are routed back to the caller.\n */\nexport class HaWebSocketClient {\n  private socket?: WebSocket;\n  private nextId = 1;\n  private pending = new Map<number, PendingRequest<unknown>>();\n  private authPromise?: Promise<void>;\n\n  constructor(private readonly url: string, private readonly token: string) {}\n\n  /**\n   * Connects to the Home Assistant WebSocket API if not already connected.\n   * The returned promise resolves once authentication succeeds.\n   */\n  private async connect(): Promise<void> {\n    if (this.socket && this.socket.readyState <= 1) {\n      return this.authPromise;\n    }\n\n    const wsUrl = `${this.url.replace(/^http/, 'ws')}/api/websocket`;\n    this.socket = new WebSocket(wsUrl);\n    logger.debug('Connecting to HA WebSocket', wsUrl);\n\n    this.authPromise = new Promise((resolve, reject) => {\n      const sock = this.socket;\n      if (!sock) {\n        reject(new Error('WebSocket not initialized'));\n        return;\n      }\n\n      sock.addEventListener('open', () => {\n        logger.debug('HA WebSocket open, sending auth');\n        sock.send(JSON.stringify({ type: 'auth', access_token: this.token }));\n      });\n\n      sock.addEventListener('message', (ev) => {\n        try {\n          const msg = JSON.parse(ev.data);\n          if (msg.type === 'auth_ok') {\n            logger.debug('HA WebSocket authenticated');\n            resolve();\n            return;\n          }\n          if (typeof msg.id === 'number' && this.pending.has(msg.id)) {\n            logger.debug('HA WebSocket response', msg.id);\n            const pendingRequest = this.pending.get(msg.id);\n            if (pendingRequest) {\n              pendingRequest.resolve(msg);\n              this.pending.delete(msg.id);\n            }\n          }\n        } catch {\n          // ignore malformed messages\n        }\n      });\n\n      const fail = (err: unknown) => {\n        reject(err);\n        this.socket = undefined;\n        this.authPromise = undefined;\n\n        // Reject all pending requests to prevent callers from hanging\n        for (const p of this.pending.values()) {\n          p.reject(err);\n        }\n        this.pending.clear();\n        logger.error('HA WebSocket failure', err);\n      };\n\n      sock.addEventListener('close', () => fail(new Error('socket closed')));\n      sock.addEventListener('error', (ev) => fail(ev));\n    });\n\n    return this.authPromise;\n  }\n\n  /**\n   * Sends an arbitrary command over the WebSocket connection.\n   *\n   * @param command Partial Home Assistant command object. The `id` field will\n   *   be added automatically.\n   * @returns The parsed response message from Home Assistant.\n   */\n  async send<T = unknown>(command: Record<string, unknown>): Promise<T> {\n    await this.connect();\n    const id = this.nextId++;\n    const payload = { ...command, id };\n    logger.debug('HA WebSocket send', payload);\n\n    return new Promise<T>((resolve, reject) => {\n      if (!this.socket) {\n        reject(new Error('socket not connected'));\n        return;\n      }\n      this.pending.set(id, {\n        resolve: resolve as (value: unknown) => void,\n        reject\n      });\n      try {\n        this.socket.send(JSON.stringify(payload));\n      } catch (err) {\n        this.pending.delete(id);\n        reject(err);\n        logger.error('HA WebSocket send error', err);\n      }\n    });\n  }\n\n  /** Convenience wrapper for `call_service` commands. */\n  callService(domain: string, service: string, serviceData?: Record<string, unknown>) {\n    return this.send({\n      type: 'call_service',\n      domain,\n      service,\n      service_data: serviceData,\n    });\n  }\n\n  /** Convenience wrapper for `get_states` command. */\n  getStates() {\n    return this.send({ type: 'get_states' });\n  }\n\n  /** Convenience wrapper for `get_services` command. */\n  getServices() {\n    return this.send({ type: 'get_services' });\n  }\n\n  /** Convenience wrapper for `get_config` command. */\n  getConfig() {\n    return this.send({ type: 'get_config' });\n  }\n\n  /** Subscribe to Home Assistant events */\n  subscribeEvents(eventType?: string) {\n    const command: Record<string, unknown> = { type: 'subscribe_events' };\n    if (eventType) {\n      command.event_type = eventType;\n    }\n    return this.send(command);\n  }\n\n  /** Get Home Assistant logs */\n  async getLogs() {\n    return this.send({ type: 'get_logs' });\n  }\n\n  /** Get error logs specifically */\n  async getErrorLogs() {\n    return this.send({\n      type: 'get_logs',\n      level: 'ERROR'\n    });\n  }\n}\n\nlet client: HaWebSocketClient | undefined;\n\n/**\n * Returns a singleton `HaWebSocketClient` instance configured from environment\n * bindings. Subsequent calls reuse the existing connection.\n */\nexport function getHaClient(env: WorkerEnv): HaWebSocketClient {\n  if (!client) {\n    client = new HaWebSocketClient(env.HASSIO_ENDPOINT_URI, env.HASSIO_TOKEN);\n  }\n  return client;\n}\n", "import type { WorkerEnv } from '../index';\nimport { logger } from './logger';\n\nexport interface InstanceConfig {\n  baseUrl: string;\n  token: string;\n}\n\nexport async function getInstanceConfig(env: WorkerEnv, instanceId: string): Promise<InstanceConfig | null> {\n  const raw = await env.CONFIG_KV.get(`instance:${instanceId}`);\n  if (raw) {\n    logger.debug('Instance config loaded', instanceId);\n  } else {\n    logger.warn('Instance config missing', instanceId);\n  }\n  return raw ? JSON.parse(raw) : null;\n}\n\nexport async function haFetch(env: WorkerEnv, instanceId: string, path: string, init: RequestInit = {}): Promise<Response> {\n  const config = await getInstanceConfig(env, instanceId);\n  if (!config) {\n    logger.error('Instance not configured', instanceId);\n    return new Response('instance not configured', { status: 404 });\n  }\n  const url = `${config.baseUrl}${path}`;\n  const headers = {\n    ...(init.headers || {}),\n    Authorization: `Bearer ${config.token}`,\n  } as Record<string, string>;\n  logger.debug('haFetch', url, init.method || 'GET');\n  return fetch(url, { ...init, headers });\n}\n", "/**\n * Log processing utilities for Home Assistant logs\n * Condenses, deduplicates, and filters logs for AI analysis\n */\n\nexport interface LogEntry {\n\ttimestamp?: string;\n\tlevel?: string;\n\tmessage?: string;\n\tlogger?: string;\n\tsource?: string;\n\texception?: string;\n\t[key: string]: unknown;\n}\n\nexport interface ProcessedLogs {\n\terrorCount: number;\n\twarningCount: number;\n\tuniqueErrors: LogEntry[];\n\trecentErrors: LogEntry[];\n\tsummary: string;\n\ttimeRange: {\n\t\tstart?: string;\n\t\tend?: string;\n\t};\n}\n\n/**\n * Condenses and processes Home Assistant logs for AI analysis\n */\nexport function processHomeLogs(logs: LogEntry[]): ProcessedLogs {\n\tif (!Array.isArray(logs) || logs.length === 0) {\n\t\treturn {\n\t\t\terrorCount: 0,\n\t\t\twarningCount: 0,\n\t\t\tuniqueErrors: [],\n\t\t\trecentErrors: [],\n\t\t\tsummary: \"No logs available for processing\",\n\t\t\ttimeRange: {},\n\t\t};\n\t}\n\n\tconst errorLogs = logs.filter((log) => log.level?.toUpperCase() === \"ERROR\");\n\tconst warningLogs = logs.filter(\n\t\t(log) => log.level?.toUpperCase() === \"WARNING\",\n\t);\n\n\t// Deduplicate errors by message content\n\tconst uniqueErrorsMap = new Map<string, LogEntry>();\n\tconst recentErrors: LogEntry[] = [];\n\n\t// Sort logs by timestamp (most recent first)\n\tconst sortedLogs = [...logs].sort((a, b) => {\n\t\tif (!a.timestamp || !b.timestamp) return 0;\n\t\treturn new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();\n\t});\n\n\tfor (const log of sortedLogs) {\n\t\tif (log.level?.toUpperCase() === \"ERROR\" && log.message) {\n\t\t\t// Create a simplified key for deduplication\n\t\t\tconst messageKey = simplifyErrorMessage(log.message);\n\n\t\t\tif (!uniqueErrorsMap.has(messageKey)) {\n\t\t\t\tuniqueErrorsMap.set(messageKey, log);\n\t\t\t}\n\n\t\t\t// Collect recent errors (last 10)\n\t\t\tif (recentErrors.length < 10) {\n\t\t\t\trecentErrors.push(log);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst uniqueErrors = Array.from(uniqueErrorsMap.values());\n\n\t// Create summary\n\tconst timestamps = logs\n\t\t.map((log) => log.timestamp)\n\t\t.filter(Boolean)\n\t\t.sort();\n\n\tconst timeRange = {\n\t\tstart: timestamps[0],\n\t\tend: timestamps[timestamps.length - 1],\n\t};\n\n\tconst summary = createLogSummary(\n\t\tlogs.length,\n\t\terrorLogs.length,\n\t\twarningLogs.length,\n\t\tuniqueErrors.length,\n\t);\n\n\treturn {\n\t\terrorCount: errorLogs.length,\n\t\twarningCount: warningLogs.length,\n\t\tuniqueErrors,\n\t\trecentErrors,\n\t\tsummary,\n\t\ttimeRange,\n\t};\n}\n\n/**\n * Simplifies error messages for deduplication\n */\nfunction simplifyErrorMessage(message: string): string {\n\treturn (\n\t\tmessage\n\t\t\t// Remove timestamps\n\t\t\t.replace(\n\t\t\t\t/\\d{4}-\\d{2}-\\d{2}[T ]\\d{2}:\\d{2}:\\d{2}[.\\d]*[Z]?/g,\n\t\t\t\t\"[TIMESTAMP]\",\n\t\t\t)\n\t\t\t// Remove IP addresses\n\t\t\t.replace(/\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/g, \"[IP]\")\n\t\t\t// Remove UUIDs\n\t\t\t.replace(\n\t\t\t\t/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/gi,\n\t\t\t\t\"[UUID]\",\n\t\t\t)\n\t\t\t// Remove file paths\n\t\t\t.replace(/\\/[a-zA-Z0-9_\\-./]+/g, \"[PATH]\")\n\t\t\t// Remove URLs\n\t\t\t.replace(/https?:\\/\\/[^\\s]+/g, \"[URL]\")\n\t\t\t// Normalize whitespace\n\t\t\t.replace(/\\s+/g, \" \")\n\t\t\t.trim()\n\t\t\t.toLowerCase()\n\t);\n}\n\n/**\n * Creates a human-readable summary of log processing results\n */\nfunction createLogSummary(\n\ttotalLogs: number,\n\terrors: number,\n\twarnings: number,\n\tuniqueErrors: number,\n): string {\n\tconst parts = [`Processed ${totalLogs} log entries`];\n\n\tif (errors > 0) {\n\t\tparts.push(`${errors} errors (${uniqueErrors} unique)`);\n\t}\n\n\tif (warnings > 0) {\n\t\tparts.push(`${warnings} warnings`);\n\t}\n\n\tif (errors === 0 && warnings === 0) {\n\t\tparts.push(\"no errors or warnings found\");\n\t}\n\n\treturn parts.join(\", \");\n}\n\n/**\n * Formats logs for AI analysis prompt\n */\nexport function formatLogsForAI(processedLogs: ProcessedLogs): string {\n\tconst sections = [];\n\n\tsections.push(`## Home Assistant Log Analysis Summary`);\n\tsections.push(`${processedLogs.summary}`);\n\n\tif (processedLogs.timeRange.start && processedLogs.timeRange.end) {\n\t\tsections.push(\n\t\t\t`Time range: ${processedLogs.timeRange.start} to ${processedLogs.timeRange.end}`,\n\t\t);\n\t}\n\n\tif (processedLogs.uniqueErrors.length > 0) {\n\t\tsections.push(\n\t\t\t`\\n## Unique Error Types (${processedLogs.uniqueErrors.length}):`,\n\t\t);\n\t\tprocessedLogs.uniqueErrors.slice(0, 5).forEach((error, index) => {\n\t\t\tsections.push(\n\t\t\t\t`${index + 1}. ${error.logger || \"Unknown\"}: ${error.message || \"No message\"}`,\n\t\t\t);\n\t\t\tif (error.exception) {\n\t\t\t\tsections.push(`   Exception: ${error.exception}`);\n\t\t\t}\n\t\t});\n\t}\n\n\tif (processedLogs.recentErrors.length > 0) {\n\t\tsections.push(\n\t\t\t`\\n## Recent Errors (${Math.min(3, processedLogs.recentErrors.length)}):`,\n\t\t);\n\t\tprocessedLogs.recentErrors.slice(0, 3).forEach((error, index) => {\n\t\t\tsections.push(\n\t\t\t\t`${index + 1}. [${error.timestamp || \"Unknown time\"}] ${error.message || \"No message\"}`,\n\t\t\t);\n\t\t});\n\t}\n\n\treturn sections.join(\"\\n\");\n}\n", "export type AlexaCard = { title?: string; content?: string; imageUrl?: string };\nexport type ApiResponse<T = unknown> = {\n  ok: boolean;\n  speech?: string;\n  card?: AlexaCard;\n  data?: T;\n  error?: { code: string; message: string; correlationId?: string };\n};\n\nexport const ok = <T>(speech: string, data?: T, card?: AlexaCard): ApiResponse<T> => ({\n  ok: true,\n  speech,\n  card,\n  data\n});\n\nexport const fail = (code: string, message: string, correlationId?: string): ApiResponse => ({\n  ok: false,\n  speech: message,\n  error: { code, message, correlationId }\n});\n", "import { Hono } from \"hono\";\nimport type { WorkerEnv } from \"../index\";\nimport { brainSweep } from \"../lib/brain\";\nimport { haFetch } from \"../lib/homeAssistant\";\nimport { getHaClient } from \"../lib/homeAssistantWs\";\nimport { logger } from \"../lib/logger\";\nimport {\n  formatLogsForAI,\n  type LogEntry,\n  processHomeLogs,\n} from \"../lib/logProcessor\";\nimport { ok } from \"../lib/response\";\n\nexport const v1 = new Hono<{ Bindings: WorkerEnv }>();\n\nv1.use(\"*\", async (c, next) => {\n\tlogger.debug(\"[v1]\", c.req.method, c.req.path);\n\tawait next();\n});\n\n// AI Brain endpoints\nv1.get(\"/brain/run\", async (c) => {\n\tlogger.debug(\"Manual brain sweep requested\");\n\ttry {\n\t\t// First sync entities from Home Assistant if needed\n\t\tlet syncResult = { synced: 0, errors: 0 };\n\n\t\tif (c.env.HASSIO_ENDPOINT_URI && c.env.HASSIO_TOKEN) {\n\t\t\t// Check if we have entities in the database\n\t\t\tconst entityCount = await c.env.D1_DB.prepare(\n\t\t\t\t\"SELECT COUNT(*) as count FROM entities\"\n\t\t\t).first<{ count: number }>();\n\n\t\t\t// If we have few or no entities, sync from Home Assistant\n\t\t\tif (!entityCount || entityCount.count < 10) {\n\t\t\t\tlogger.debug(\"Syncing entities before brain sweep\");\n\t\t\t\tsyncResult = await syncEntitiesFromHA(\n\t\t\t\t\tc.env.D1_DB,\n\t\t\t\t\tc.env.HASSIO_ENDPOINT_URI,\n\t\t\t\t\tc.env.HASSIO_TOKEN\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Run the brain sweep\n\t\tconst result = await brainSweep(c.env.D1_DB);\n\n\t\treturn c.json(ok(\"brain sweep completed\", {\n\t\t\t...result,\n\t\t\tentitiesSynced: syncResult.synced,\n\t\t\tsyncErrors: syncResult.errors,\n\t\t}));\n\t} catch (error) {\n\t\tlogger.error(\"Brain sweep failed:\", error);\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: `Brain sweep failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n\t\t\t},\n\t\t\t500,\n\t\t);\n\t}\n});\n\nv1.get(\"/brain/status\", async (c) => {\n\tlogger.debug(\"Brain status requested\");\n\ttry {\n\t\t// Get counts of normalized entities and intent candidates\n\t\tconst normalizedCount = await c.env.D1_DB.prepare(\n\t\t\t\"SELECT COUNT(*) as count FROM entity_normalization\",\n\t\t).first<{ count: number }>();\n\n\t\tconst intentCount = await c.env.D1_DB.prepare(\n\t\t\t\"SELECT COUNT(*) as count FROM intent_candidates WHERE enabled = 1\",\n\t\t).first<{ count: number }>();\n\n\t\tconst entityCount = await c.env.D1_DB.prepare(\n\t\t\t\"SELECT COUNT(*) as count FROM entities\",\n\t\t).first<{ count: number }>();\n\n\t\t// Find entities that need brain processing\n\t\tconst unbrainedCount = await c.env.D1_DB.prepare(`\n\t\t\t\tSELECT COUNT(DISTINCT e.id) as count\n\t\t\t\tFROM entities e\n\t\t\t\tLEFT JOIN entity_normalization n ON n.entity_id = e.id\n\t\t\t\tLEFT JOIN intent_candidates i ON i.entity_id = e.id AND i.enabled = 1\n\t\t\t\tGROUP BY e.id\n\t\t\t\tHAVING n.entity_id IS NULL OR COUNT(i.id) < 5\n\t\t\t`).first<{ count: number }>();\n\n\t\t// Get the last brain run\n\t\tconst lastRun = await c.env.D1_DB.prepare(`\n\t\t\tSELECT ran_at_utc, scanned, normalized, intents_created\n\t\t\tFROM brain_runs\n\t\t\tORDER BY ran_at_utc DESC\n\t\t\tLIMIT 1\n\t\t`).first<{ ran_at_utc: string; scanned: number; normalized: number; intents_created: number }>();\n\n\t\treturn c.json(\n\t\t\tok(\"brain status\", {\n\t\t\t\tentities: {\n\t\t\t\t\ttotal: entityCount?.count || 0,\n\t\t\t\t\tnormalized: normalizedCount?.count || 0,\n\t\t\t\t\tunbrained: unbrainedCount?.count || 0,\n\t\t\t\t},\n\t\t\t\tintents: {\n\t\t\t\t\ttotal: intentCount?.count || 0,\n\t\t\t\t\taveragePerEntity: entityCount?.count\n\t\t\t\t\t\t? Math.round(\n\t\t\t\t\t\t\t\t((intentCount?.count || 0) / entityCount.count) * 100,\n\t\t\t\t\t\t\t) / 100\n\t\t\t\t\t\t: 0,\n\t\t\t\t},\n\t\t\t\tlastRun: lastRun ? {\n\t\t\t\t\tranAt: lastRun.ran_at_utc,\n\t\t\t\t\tscanned: lastRun.scanned,\n\t\t\t\t\tnormalized: lastRun.normalized,\n\t\t\t\t\tintentsCreated: lastRun.intents_created\n\t\t\t\t} : null,\n\t\t\t}),\n\t\t);\n\t} catch (error) {\n\t\tlogger.error(\"Brain status failed:\", error);\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: `Brain status failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n\t\t\t},\n\t\t\t500,\n\t\t);\n\t}\n});\n\n// NOTE: All are stubs. Real logic (LAN scan, Protect, D1, R2) comes next PR.\n\nv1.post(\"/devices/scan\", async (c) => {\n\tlogger.debug(\"devices/scan invoked\");\n\n\t// Check if Home Assistant is configured\n\tif (!c.env.HASSIO_ENDPOINT_URI || !c.env.HASSIO_TOKEN) {\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror:\n\t\t\t\t\t\"Home Assistant not configured. Please set HASSIO_ENDPOINT_URI and HASSIO_TOKEN.\",\n\t\t\t},\n\t\t\t400,\n\t\t);\n\t}\n\n\ttry {\n\t\t// Sync entities from Home Assistant to database\n\t\tconst syncResult = await syncEntitiesFromHA(\n\t\t\tc.env.D1_DB,\n\t\t\tc.env.HASSIO_ENDPOINT_URI,\n\t\t\tc.env.HASSIO_TOKEN\n\t\t);\n\n\t\t// Get all entity states for summary information\n\t\tconst statesRes = await fetch(`${c.env.HASSIO_ENDPOINT_URI}/api/states`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t});\n\n\t\tif (!statesRes.ok) {\n\t\t\tthrow new Error(`States fetch failed: ${statesRes.status}`);\n\t\t}\n\n\t\tconst states = await statesRes.json();\n\t\tconst entityCount = Array.isArray(states) ? states.length : 0;\n\n\t\t// Group entities by domain to get device-like information\n\t\tconst entityByDomain: Record<string, number> = {};\n\t\tconst devices: string[] = [];\n\n\t\tif (Array.isArray(states)) {\n\t\t\tfor (const entity of states) {\n\t\t\t\tif (entity.entity_id) {\n\t\t\t\t\tconst domain = entity.entity_id.split(\".\")[0];\n\t\t\t\t\tentityByDomain[domain] = (entityByDomain[domain] || 0) + 1;\n\n\t\t\t\t\t// Extract unique device names from entity attributes\n\t\t\t\t\tif (entity.attributes?.device_id || entity.attributes?.unique_id) {\n\t\t\t\t\t\tconst deviceId =\n\t\t\t\t\t\t\tentity.attributes.device_id || entity.attributes.unique_id;\n\t\t\t\t\t\tif (deviceId && !devices.includes(deviceId)) {\n\t\t\t\t\t\t\tdevices.push(deviceId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst deviceCount = devices.length;\n\n\t\tlogger.debug(\"device scan complete\", {\n\t\t\tentityCount,\n\t\t\tdeviceCount,\n\t\t\tdomains: Object.keys(entityByDomain).length,\n\t\t\tsyncedEntities: syncResult.synced,\n\t\t\tsyncErrors: syncResult.errors,\n\t\t\ttopDomains: Object.entries(entityByDomain)\n\t\t\t\t.sort(([, a], [, b]) => b - a)\n\t\t\t\t.slice(0, 5),\n\t\t});\n\n\t\treturn c.json(\n\t\t\tok(\"device scan completed\", {\n\t\t\t\tadded: syncResult.synced, // Entities synced to database\n\t\t\t\tupdated: deviceCount,\n\t\t\t\ttotal: deviceCount,\n\t\t\t\tentities: entityCount,\n\t\t\t\tentitiesSynced: syncResult.synced,\n\t\t\t\tsyncErrors: syncResult.errors,\n\t\t\t\tdomains: entityByDomain,\n\t\t\t\tsummary: `Found ${entityCount} entities across ${Object.keys(entityByDomain).length} domains, synced ${syncResult.synced} to database`,\n\t\t\t\treportUrl: null,\n\t\t\t}),\n\t\t);\n\t} catch (error) {\n\t\tlogger.error(\"Device scan failed:\", error);\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: `Device scan failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n\t\t\t},\n\t\t\t500,\n\t\t);\n\t}\n});\n\nv1.get(\"/devices\", async (c) => {\n\tlogger.debug(\"devices list requested\");\n\treturn c.json(ok(\"stub: list devices\", { items: [], total: 0 }));\n});\n\nv1.get(\"/devices/:id\", async (c) => {\n\tconst { id } = c.req.param();\n\tlogger.debug(\"device detail requested\", id);\n\treturn c.json(\n\t\tok(`stub: device detail for ${id}`, {\n\t\t\tid,\n\t\t\tmac: null,\n\t\t\tip: null,\n\t\t\tlastSeenTs: null,\n\t\t}),\n\t);\n});\n\nv1.get(\"/cameras\", async (c) => {\n\tlogger.debug(\"cameras list requested\");\n\n\t// Check if Home Assistant is configured\n\tif (!c.env.HASSIO_ENDPOINT_URI || !c.env.HASSIO_TOKEN) {\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: \"Home Assistant not configured. Please set HASSIO_ENDPOINT_URI and HASSIO_TOKEN.\",\n\t\t\t},\n\t\t\t400,\n\t\t);\n\t}\n\n\ttry {\n\t\t// Get all entities from Home Assistant\n\t\tconst statesRes = await fetch(`${c.env.HASSIO_ENDPOINT_URI}/api/states`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t});\n\n\t\tif (!statesRes.ok) {\n\t\t\tthrow new Error(`States fetch failed: ${statesRes.status}`);\n\t\t}\n\n\t\tconst entities = (await statesRes.json()) as Array<{\n\t\t\tentity_id: string;\n\t\t\tstate: string;\n\t\t\tattributes?: {\n\t\t\t\tfriendly_name?: string;\n\t\t\t\tbrand?: string;\n\t\t\t\tdevice_class?: string;\n\t\t\t\taccess_token?: string;\n\t\t\t\tentity_picture?: string;\n\t\t\t\t[key: string]: unknown;\n\t\t\t};\n\t\t}>;\n\n\t\t// Filter for camera entities\n\t\tconst cameras = entities.filter((entity) =>\n\t\t\tentity.entity_id.startsWith(\"camera.\")\n\t\t).map(camera => ({\n\t\t\tentity_id: camera.entity_id,\n\t\t\tfriendly_name: camera.attributes?.friendly_name || camera.entity_id,\n\t\t\tstate: camera.state,\n\t\t\tbrand: camera.attributes?.brand || 'Unknown',\n\t\t\tdevice_class: camera.attributes?.device_class || 'camera',\n\t\t\tentity_picture: camera.attributes?.entity_picture,\n\t\t\taccess_token: camera.attributes?.access_token,\n\t\t\t// Use our local proxy for camera images to avoid CORS issues\n\t\t\tstream_url: `/api/camera_proxy/${camera.entity_id}`,\n\t\t\t// Add live stream capability check and endpoint\n\t\t\thas_live_stream: !!(camera.attributes?.access_token || camera.attributes?.entity_picture),\n\t\t\tlive_stream_endpoint: camera.attributes?.entity_picture && camera.attributes?.access_token\n\t\t\t\t? `${c.env.HASSIO_ENDPOINT_URI}${camera.attributes.entity_picture}?token=${camera.attributes.access_token}`\n\t\t\t\t: `/v1/cameras/${camera.entity_id}/stream`\n\t\t}));\n\n\t\t// Categorize cameras by status - expand what's considered \"online\"\n\t\tconst onlineCameras = cameras.filter(\n\t\t\t(camera) => camera.state !== \"unavailable\" && camera.state !== \"unknown\" && camera.state !== \"error\"\n\t\t);\n\n\t\tconst offlineCameras = cameras.filter(\n\t\t\t(camera) => camera.state === \"unavailable\" || camera.state === \"unknown\" || camera.state === \"error\"\n\t\t);\n\n\t\t// Log all camera states for debugging\n\t\tconst cameraStates = cameras.reduce((acc, camera) => {\n\t\t\tacc[camera.state] = (acc[camera.state] || 0) + 1;\n\t\t\treturn acc;\n\t\t}, {} as Record<string, number>);\n\n\t\tlogger.debug(\"cameras found\", {\n\t\t\ttotal: cameras.length,\n\t\t\tonline: onlineCameras.length,\n\t\t\toffline: offlineCameras.length,\n\t\t\tstates: cameraStates,\n\t\t});\n\n\t\treturn c.json(\n\t\t\tok(\"cameras retrieved\", {\n\t\t\t\tcameras,\n\t\t\t\tsummary: {\n\t\t\t\t\ttotal: cameras.length,\n\t\t\t\t\tonline: onlineCameras.length,\n\t\t\t\t\toffline: offlineCameras.length,\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t} catch (error) {\n\t\tlogger.error(\"Camera fetch failed:\", error);\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: `Camera fetch failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n\t\t\t},\n\t\t\t500,\n\t\t);\n\t}\n});\n\n// Get live stream URL for a camera\nv1.get(\"/cameras/:entity_id/stream\", async (c) => {\n\tconst { entity_id } = c.req.param();\n\tlogger.debug(\"Live stream URL requested for\", entity_id);\n\n\tif (!c.env.HASSIO_ENDPOINT_URI || !c.env.HASSIO_TOKEN) {\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: \"Home Assistant not configured\",\n\t\t\t},\n\t\t\t400,\n\t\t);\n\t}\n\n\ttry {\n\t\t// Call Home Assistant's camera stream URL API\n\t\tconst streamRes = await fetch(\n\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/camera_proxy_stream/${entity_id}`,\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!streamRes.ok) {\n\t\t\t// If the stream proxy doesn't work, try getting the entity details\n\t\t\t// and construct a stream URL from the entity_picture with access_token\n\t\t\tconst entityRes = await fetch(\n\t\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/states/${entity_id}`,\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (entityRes.ok) {\n\t\t\t\tconst entity = await entityRes.json() as {\n\t\t\t\t\tattributes?: {\n\t\t\t\t\t\taccess_token?: string;\n\t\t\t\t\t\tentity_picture?: string;\n\t\t\t\t\t\t[key: string]: unknown;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\tconst accessToken = entity.attributes?.access_token;\n\t\t\t\tconst entityPicture = entity.attributes?.entity_picture;\n\n\t\t\t\tif (entityPicture && accessToken) {\n\t\t\t\t\t// Construct live stream URL using entity_picture with access_token\n\t\t\t\t\tconst streamUrl = `${c.env.HASSIO_ENDPOINT_URI}${entityPicture}?token=${accessToken}`;\n\t\t\t\t\treturn c.json(\n\t\t\t\t\t\tok(\"camera stream URL\", {\n\t\t\t\t\t\t\tentity_id,\n\t\t\t\t\t\t\tstream_url: streamUrl,\n\t\t\t\t\t\t\tstream_type: \"mjpeg\",\n\t\t\t\t\t\t\tfallback_url: `/api/camera_proxy/${entity_id}`,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(`Stream not available for ${entity_id}`);\n\t\t}\n\n\t\t// If we get here, the stream proxy worked\n\t\tconst streamUrl = `${c.env.HASSIO_ENDPOINT_URI}/api/camera_proxy_stream/${entity_id}`;\n\t\treturn c.json(\n\t\t\tok(\"camera stream URL\", {\n\t\t\t\tentity_id,\n\t\t\t\tstream_url: streamUrl,\n\t\t\t\tstream_type: \"stream\",\n\t\t\t\tfallback_url: `/api/camera_proxy/${entity_id}`,\n\t\t\t}),\n\t\t);\n\t} catch (error) {\n\t\tlogger.error(\"Camera stream URL fetch failed:\", error);\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: `Camera stream failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n\t\t\t\tfallback_url: `/api/camera_proxy/${entity_id}`,\n\t\t\t},\n\t\t\t500,\n\t\t);\n\t}\n});\n\n// Refresh a specific camera by calling Home Assistant reload service\nv1.post(\"/cameras/:entity_id/refresh\", async (c) => {\n\tconst { entity_id } = c.req.param();\n\tlogger.debug(\"Camera refresh requested for\", entity_id);\n\n\tif (!c.env.HASSIO_ENDPOINT_URI || !c.env.HASSIO_TOKEN) {\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: \"Home Assistant not configured\",\n\t\t\t},\n\t\t\t400,\n\t\t);\n\t}\n\n\ttry {\n\t\t// First get the camera entity to find its config_entry_id\n\t\tconst entityRes = await fetch(\n\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/states/${entity_id}`,\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!entityRes.ok) {\n\t\t\tthrow new Error(`Entity fetch failed: ${entityRes.status}`);\n\t\t}\n\n\t\tconst entity = await entityRes.json() as {\n\t\t\tattributes?: {\n\t\t\t\tfriendly_name?: string;\n\t\t\t\tdevice_id?: string;\n\t\t\t\t[key: string]: unknown;\n\t\t\t};\n\t\t};\n\n\t\t// Try multiple approaches to refresh the camera\n\t\tlet refreshResult = null;\n\t\tlet refreshMethod = \"\";\n\n\t\t// Method 1: Try to reload the config entry if we can find the device_id\n\t\tif (entity.attributes?.device_id) {\n\t\t\ttry {\n\t\t\t\t// Get device info to find config_entry_id\n\t\t\t\tconst deviceRes = await fetch(\n\t\t\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/config/device_registry`,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (deviceRes.ok) {\n\t\t\t\t\tconst devices = await deviceRes.json() as Array<{\n\t\t\t\t\t\tid: string;\n\t\t\t\t\t\tconfig_entries: string[];\n\t\t\t\t\t}>;\n\t\t\t\t\tconst device = devices.find(d => d.id === entity.attributes?.device_id);\n\n\t\t\t\t\tif (device && device.config_entries.length > 0) {\n\t\t\t\t\t\t// Reload the config entry\n\t\t\t\t\t\tconst reloadRes = await fetch(\n\t\t\t\t\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/services/homeassistant/reload_config_entry`,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\t\t\tentry_id: device.config_entries[0],\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (reloadRes.ok) {\n\t\t\t\t\t\t\trefreshResult = await reloadRes.json();\n\t\t\t\t\t\t\trefreshMethod = \"config_entry_reload\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (configError) {\n\t\t\t\tlogger.debug(\"Config entry reload failed, trying alternative methods\", configError);\n\t\t\t}\n\t\t}\n\n\t\t// Method 2: If config entry reload didn't work, try homeassistant.update_entity\n\t\tif (!refreshResult) {\n\t\t\ttry {\n\t\t\t\tconst updateRes = await fetch(\n\t\t\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/services/homeassistant/update_entity`,\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tentity_id: entity_id,\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (updateRes.ok) {\n\t\t\t\t\trefreshResult = await updateRes.json();\n\t\t\t\t\trefreshMethod = \"update_entity\";\n\t\t\t\t}\n\t\t\t} catch (updateError) {\n\t\t\t\tlogger.debug(\"Update entity failed, trying final method\", updateError);\n\t\t\t}\n\t\t}\n\n\t\t// Method 3: If nothing else worked, try to call camera.snapshot service to trigger activity\n\t\tif (!refreshResult) {\n\t\t\ttry {\n\t\t\t\tconst snapshotRes = await fetch(\n\t\t\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/services/camera/snapshot`,\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tentity_id: entity_id,\n\t\t\t\t\t\t\tfilename: `/tmp/camera_refresh_${entity_id.replace('.', '_')}.jpg`,\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (snapshotRes.ok) {\n\t\t\t\t\trefreshResult = await snapshotRes.json();\n\t\t\t\t\trefreshMethod = \"snapshot_trigger\";\n\t\t\t\t}\n\t\t\t} catch (snapshotError) {\n\t\t\t\tlogger.debug(\"Snapshot trigger failed\", snapshotError);\n\t\t\t}\n\t\t}\n\n\t\tif (refreshResult) {\n\t\t\treturn c.json(\n\t\t\t\tok(\"camera refreshed\", {\n\t\t\t\t\tentity_id,\n\t\t\t\t\tmethod: refreshMethod,\n\t\t\t\t\tfriendly_name: entity.attributes?.friendly_name || entity_id,\n\t\t\t\t\tresult: refreshResult,\n\t\t\t\t}),\n\t\t\t);\n\t\t} else {\n\t\t\t// If all methods failed, just return success since we tried our best\n\t\t\treturn c.json(\n\t\t\t\tok(\"camera refresh attempted\", {\n\t\t\t\t\tentity_id,\n\t\t\t\t\tmethod: \"attempted_multiple\",\n\t\t\t\t\tfriendly_name: entity.attributes?.friendly_name || entity_id,\n\t\t\t\t\tnote: \"Refresh was attempted but specific result unavailable\",\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t} catch (error) {\n\t\tlogger.error(\"Camera refresh failed:\", error);\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: `Camera refresh failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n\t\t\t},\n\t\t\t500,\n\t\t);\n\t}\n});\n\nv1.post(\"/protect/sync\", async (c) => {\n\tlogger.debug(\"protect sync invoked\");\n\n\ttry {\n\t\t// Get all entities to find UniFi Protect cameras\n\t\tconst entitiesRes = await fetch(`${c.env.HASSIO_ENDPOINT_URI}/api/states`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t});\n\n\t\tif (!entitiesRes.ok) {\n\t\t\tthrow new Error(`States fetch failed: ${entitiesRes.status}`);\n\t\t}\n\n\t\tconst entities = (await entitiesRes.json()) as Array<{\n\t\t\tentity_id: string;\n\t\t\tstate: string;\n\t\t\tattributes?: {\n\t\t\t\tbrand?: string;\n\t\t\t\tdevice_class?: string;\n\t\t\t\t[key: string]: unknown;\n\t\t\t};\n\t\t}>;\n\n\t\t// Filter for UniFi Protect camera entities\n\t\tconst protectCameras = entities.filter(\n\t\t\t(entity) =>\n\t\t\t\tentity.entity_id.startsWith(\"camera.\") &&\n\t\t\t\t(entity.attributes?.brand === \"Ubiquiti Inc.\" ||\n\t\t\t\t\tentity.entity_id.includes(\"unifi\") ||\n\t\t\t\t\tentity.attributes?.device_class === \"camera\"),\n\t\t);\n\n\t\t// Count online/offline cameras\n\t\tconst onlineCameras = protectCameras.filter(\n\t\t\t(camera) => camera.state === \"idle\" || camera.state === \"streaming\",\n\t\t);\n\n\t\tconst offlineCameras = protectCameras.filter(\n\t\t\t(camera) => camera.state === \"unavailable\" || camera.state === \"unknown\",\n\t\t);\n\n\t\t// Try to get snapshot count (this would be implementation specific)\n\t\tlet snapshotCount = 0;\n\t\ttry {\n\t\t\t// This would typically call a UniFi Protect specific service\n\t\t\tconst snapshotRes = await fetch(\n\t\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/services/unifiprotect/get_snapshot_url`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\tentity_id: protectCameras.map((c) => c.entity_id),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (snapshotRes.ok) {\n\t\t\t\tconst snapshots = (await snapshotRes.json()) as unknown[];\n\t\t\t\tsnapshotCount = Array.isArray(snapshots)\n\t\t\t\t\t? snapshots.length\n\t\t\t\t\t: protectCameras.length;\n\t\t\t}\n\t\t} catch (snapshotError) {\n\t\t\tlogger.debug(\"Snapshot count failed, using camera count\", snapshotError);\n\t\t\tsnapshotCount = protectCameras.length;\n\t\t}\n\n\t\tlogger.debug(\"protect sync complete\", {\n\t\t\ttotal: protectCameras.length,\n\t\t\tonline: onlineCameras.length,\n\t\t\toffline: offlineCameras.length,\n\t\t\tsnapshotCount,\n\t\t});\n\n\t\treturn c.json(\n\t\t\tok(\"protect sync completed\", {\n\t\t\t\ttotal: protectCameras.length,\n\t\t\t\tonline: onlineCameras.length,\n\t\t\t\tupdated: onlineCameras.length, // Cameras that were successfully synced\n\t\t\t\tsnapshotCount: snapshotCount,\n\t\t\t\toffline: offlineCameras.map((c) => c.entity_id),\n\t\t\t}),\n\t\t);\n\t} catch (error) {\n\t\tlogger.error(\"Protect sync failed:\", error);\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: `Protect sync failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n\t\t\t},\n\t\t\t500,\n\t\t);\n\t}\n});\n\nv1.get(\"/protect/cameras\", async (c) => {\n\tlogger.debug(\"protect cameras list requested\");\n\treturn c.json(\n\t\tok(\"stub: list cameras\", { total: 0, online: 0, offline: [], items: [] }),\n\t);\n});\n\nv1.post(\"/protect/cameras/:id/snapshot\", async (c) => {\n\tconst { id } = c.req.param();\n\tlogger.debug(\"camera snapshot requested\", id);\n\treturn c.json(\n\t\tok(`stub: camera snapshot for ${id}`, { imageUrl: null, camera: id }),\n\t);\n});\n\nv1.post(\"/ai/summary\", async (c) => {\n\tlogger.debug(\"ai summary requested - pulling Home Assistant logs\");\n\n\t// Check if Home Assistant is configured\n\tif (!c.env.HASSIO_ENDPOINT_URI || !c.env.HASSIO_TOKEN) {\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: \"Home Assistant not configured. Cannot retrieve logs.\",\n\t\t\t},\n\t\t\t400,\n\t\t);\n\t}\n\n\ttry {\n\t\t// Get logs from Home Assistant via REST API first (fallback if WebSocket fails)\n\t\tlet logs: LogEntry[] = [];\n\t\tlet logSource = \"none\";\n\n\t\ttry {\n\t\t\t// Try to get logs via WebSocket first (more reliable)\n\t\t\tconst wsClient = getHaClient(c.env);\n\t\t\tconst wsLogs = (await Promise.race([\n\t\t\t\twsClient.getLogs(),\n\t\t\t\tnew Promise<never>((_, reject) =>\n\t\t\t\t\tsetTimeout(() => reject(new Error(\"Timeout\")), 10000),\n\t\t\t\t),\n\t\t\t])) as unknown;\n\n\t\t\tif (\n\t\t\t\twsLogs &&\n\t\t\t\ttypeof wsLogs === \"object\" &&\n\t\t\t\t\"result\" in wsLogs &&\n\t\t\t\tArray.isArray((wsLogs as { result: unknown }).result)\n\t\t\t) {\n\t\t\t\tlogs = (wsLogs as { result: LogEntry[] }).result;\n\t\t\t\tlogSource = \"websocket\";\n\t\t\t}\n\t\t} catch (wsError) {\n\t\t\tlogger.debug(\"WebSocket log fetch failed, trying REST API\", wsError);\n\n\t\t\t// Fallback: Try REST API endpoint for error logs\n\t\t\ttry {\n\t\t\t\tconst errorLogRes = await fetch(\n\t\t\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/error_log`,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsignal: AbortSignal.timeout(10000),\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (errorLogRes.ok) {\n\t\t\t\t\tconst errorLogText = await errorLogRes.text();\n\t\t\t\t\t// Parse error log text into structured format\n\t\t\t\t\tlogs = parseErrorLogText(errorLogText);\n\t\t\t\t\tlogSource = \"error_log_api\";\n\t\t\t\t}\n\t\t\t} catch (restError) {\n\t\t\t\tlogger.debug(\"REST API log fetch also failed\", restError);\n\t\t\t}\n\t\t}\n\n\t\t// If we still don't have logs, try getting recent states with errors\n\t\tif (logs.length === 0) {\n\t\t\ttry {\n\t\t\t\tconst statesRes = await fetch(\n\t\t\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/states`,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (statesRes.ok) {\n\t\t\t\t\tconst states = (await statesRes.json()) as unknown[];\n\t\t\t\t\t// Extract entities with error states or unavailable status\n\t\t\t\t\tlogs = extractErrorsFromStates(states);\n\t\t\t\t\tlogSource = \"states_api\";\n\t\t\t\t}\n\t\t\t} catch (statesError) {\n\t\t\t\tlogger.debug(\"States API also failed\", statesError);\n\t\t\t}\n\t\t}\n\n\t\t// Process and condense the logs\n\t\tconst processedLogs = processHomeLogs(logs);\n\t\tlogger.debug(\n\t\t\t`Log processing complete: ${processedLogs.summary}, source: ${logSource}`,\n\t\t);\n\n\t\t// Format for AI analysis\n\t\tconst prompt = `You are analyzing Home Assistant logs. Please provide a concise diagnostic summary and recommendations.\n\n${formatLogsForAI(processedLogs)}\n\nPlease provide:\n1. Overall system health assessment\n2. Priority issues that need attention\n3. Recommended actions\n4. Any patterns or recurring problems\n\nKeep the response concise and actionable.`;\n\n\t\t// Use a model that's definitely available in the runtime\n\t\tlet responseText = \"No response generated\";\n\n\t\ttry {\n\t\t\tconst result = (await c.env.AI.run(\"@cf/meta/llama-3.1-8b-instruct\", {\n\t\t\t\tprompt,\n\t\t\t\tmax_tokens: 512,\n\t\t\t})) as { response?: string; text?: string };\n\n\t\t\tresponseText = result.response || result.text || \"No response generated\";\n\t\t} catch (aiError) {\n\t\t\tlogger.debug(\"AI inference failed, using fallback analysis\", aiError);\n\n\t\t\t// Fallback: Generate a basic analysis from the processed logs\n\t\t\tresponseText = `**System Health Assessment** (Generated without AI inference)\n\n**Overall Status**: ${processedLogs.errorCount > 0 ? 'Issues Detected' : 'System Appears Healthy'}\n\n**Key Findings**:\n- ${processedLogs.errorCount} error(s) found\n- ${processedLogs.warningCount} warning(s) detected\n- ${processedLogs.uniqueErrors.length} unique error type(s)\n- Log source: ${logSource}\n\n**Priority Issues**:\n${processedLogs.uniqueErrors.slice(0, 3).map(error => `- ${error}`).join('\\n') || '- No critical errors detected'}\n\n**Recommendations**:\n- Monitor entities showing 'unavailable' status\n- Check network connectivity for offline devices\n- Review Home Assistant logs for detailed error information\n- Consider restarting services if issues persist\n\n**Note**: This analysis was generated without AI inference due to local development limitations.`;\n\t\t}\n\n\t\tlogger.debug(\"ai summary response generated\");\n\n\t\treturn c.json(\n\t\t\tok(\"ai summary\", {\n\t\t\t\ttext: responseText,\n\t\t\t\tlogAnalysis: {\n\t\t\t\t\tsource: logSource,\n\t\t\t\t\tsummary: processedLogs.summary,\n\t\t\t\t\terrorCount: processedLogs.errorCount,\n\t\t\t\t\twarningCount: processedLogs.warningCount,\n\t\t\t\t\tuniqueErrorTypes: processedLogs.uniqueErrors.length,\n\t\t\t\t\ttimeRange: processedLogs.timeRange,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t} catch (error) {\n\t\tlogger.error(\"AI summary error:\", error);\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: `AI summary failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n\t\t\t},\n\t\t\t500,\n\t\t);\n\t}\n});\n\n/**\n * Parse Home Assistant error log text into structured log entries\n */\nfunction parseErrorLogText(logText: string): LogEntry[] {\n\tconst lines = logText.split(\"\\n\").filter((line) => line.trim());\n\tconst logs: LogEntry[] = [];\n\n\tfor (const line of lines) {\n\t\t// Parse log format: TIMESTAMP LEVEL LOGGER: MESSAGE\n\t\tconst match = line.match(\n\t\t\t/^(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\s+(\\w+)\\s+([^:]+):\\s*(.+)$/,\n\t\t);\n\t\tif (match) {\n\t\t\tlogs.push({\n\t\t\t\ttimestamp: match[1],\n\t\t\t\tlevel: match[2],\n\t\t\t\tlogger: match[3].trim(),\n\t\t\t\tmessage: match[4].trim(),\n\t\t\t});\n\t\t} else if (line.trim()) {\n\t\t\t// Fallback for non-standard format\n\t\t\tlogs.push({\n\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\tlevel: \"INFO\",\n\t\t\t\tlogger: \"unknown\",\n\t\t\t\tmessage: line.trim(),\n\t\t\t});\n\t\t}\n\t}\n\n\treturn logs;\n}\n\n/**\n * Extract error information from Home Assistant states\n */\nfunction extractErrorsFromStates(states: unknown[]): LogEntry[] {\n\tconst logs: LogEntry[] = [];\n\tconst now = new Date().toISOString();\n\n\tif (Array.isArray(states)) {\n\t\tfor (const state of states) {\n\t\t\t// Type guard for state object\n\t\t\tif (\n\t\t\t\ttypeof state === \"object\" &&\n\t\t\t\tstate !== null &&\n\t\t\t\t\"state\" in state &&\n\t\t\t\t\"entity_id\" in state\n\t\t\t) {\n\t\t\t\tconst stateObj = state as {\n\t\t\t\t\tstate: string;\n\t\t\t\t\tentity_id: string;\n\t\t\t\t\tlast_changed?: string;\n\t\t\t\t};\n\t\t\t\tif (stateObj.state === \"unavailable\" || stateObj.state === \"unknown\") {\n\t\t\t\t\tlogs.push({\n\t\t\t\t\t\ttimestamp: stateObj.last_changed || now,\n\t\t\t\t\t\tlevel: \"WARNING\",\n\t\t\t\t\t\tlogger: \"entity_state\",\n\t\t\t\t\t\tmessage: `Entity ${stateObj.entity_id} is ${stateObj.state}`,\n\t\t\t\t\t\tsource: \"state_analysis\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn logs;\n}\n\nv1.post(\"/webhooks/logs\", async (c) => {\n\tconst log = await c.req.json();\n\tconst key = `logs/${Date.now()}-${crypto.randomUUID()}.json`;\n\tawait c.env.LOGS_BUCKET.put(key, JSON.stringify(log));\n\n\tif (typeof log?.level === \"string\" && log.level.toUpperCase() === \"ERROR\") {\n\t\ttry {\n\t\t\tconst analysis = (await c.env.AI.run(\"@cf/meta/llama-3.1-8b-instruct\", {\n\t\t\t\tprompt: `Analyze Home Assistant log and provide diagnostics:\\n${JSON.stringify(log)}`,\n\t\t\t\tmax_tokens: 256,\n\t\t\t})) as { response: string };\n\t\t\tconst id = crypto.randomUUID();\n\t\t\tawait c.env.D1_DB.prepare(\n\t\t\t\t\"INSERT INTO log_diagnostics (id, log_key, analysis, created_at) VALUES (?, ?, ?, ?)\",\n\t\t\t)\n\t\t\t\t.bind(id, key, analysis.response, Date.now())\n\t\t\t\t.run();\n\t\t} catch (err) {\n\t\t\t// swallow errors to avoid failing webhook\n\t\t\tlogger.error(\"Error during log analysis:\", err);\n\t\t}\n\t}\n\n\tlogger.debug(\"log stored\", key);\n\treturn c.json(ok(\"log stored\", { key }));\n});\n\nv1.get(\"/worker/state/:key\", async (c) => {\n\tconst { key } = c.req.param();\n\tconst value = await c.env.CONFIG_KV.get(key);\n\tlogger.debug(\"state retrieved\", key);\n\treturn c.json(ok(\"state retrieved\", { key, value }));\n});\n\nv1.put(\"/worker/state/:key\", async (c) => {\n\tconst { key } = c.req.param();\n\tconst value = await c.req.text();\n\tawait c.env.CONFIG_KV.put(key, value);\n\tlogger.debug(\"state stored\", key);\n\treturn c.json(ok(\"state stored\", { key }));\n});\n\nv1.get(\"/ha/:instanceId/states/:entityId\", async (c) => {\n\tconst { instanceId, entityId } = c.req.param();\n\tlogger.debug(\"HA state fetch\", instanceId, entityId);\n\tconst res = await haFetch(c.env, instanceId, `/api/states/${entityId}`);\n\tconst data = await res.json();\n\treturn c.json(ok(\"state\", data));\n});\n\nv1.put(\"/ha/:instanceId/states/:entityId\", async (c) => {\n\tconst { instanceId, entityId } = c.req.param();\n\tconst body = await c.req.json();\n\tlogger.debug(\"HA state update\", instanceId, entityId, body);\n\tconst res = await haFetch(c.env, instanceId, `/api/states/${entityId}`, {\n\t\tmethod: \"POST\",\n\t\tbody: JSON.stringify(body),\n\t\theaders: { \"Content-Type\": \"application/json\" },\n\t});\n\tconst data = await res.json();\n\treturn c.json(ok(\"state updated\", data));\n});\n\nv1.post(\"/ha/:instanceId/services/:domain/:service\", async (c) => {\n\tconst { instanceId, domain, service } = c.req.param();\n\tconst body = await c.req.json();\n\tlogger.debug(\"HA service call\", instanceId, domain, service, body);\n\tconst res = await haFetch(\n\t\tc.env,\n\t\tinstanceId,\n\t\t`/api/services/${domain}/${service}`,\n\t\t{\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify(body),\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t},\n\t);\n\tconst data = await res.json();\n\treturn c.json(ok(\"service called\", data));\n});\n\n// Generic Home Assistant WebSocket command endpoint using worker-configured instance\nv1.post(\"/ha/ws\", async (c) => {\n\tconst command = await c.req.json();\n\tlogger.debug(\"HA WS command\", command);\n\tif (\n\t\ttypeof command !== \"object\" ||\n\t\tcommand === null ||\n\t\tArray.isArray(command)\n\t) {\n\t\treturn c.json(\n\t\t\t{ ok: false, error: \"Request body must be a JSON object\" },\n\t\t\t400,\n\t\t);\n\t}\n\tconst data = await getHaClient(c.env).send(command);\n\tlogger.debug(\"HA WS response\", data);\n\treturn c.json(ok(\"ws response\", data));\n});\n\n// Home Assistant API diagnostics endpoint\nv1.post(\"/ha/diagnostics\", async (c) => {\n\tlogger.debug(\"ha/diagnostics invoked\");\n\n\t// Check if Home Assistant is configured\n\tif (!c.env.HASSIO_ENDPOINT_URI || !c.env.HASSIO_TOKEN) {\n\t\treturn c.json({ ok: false, error: \"Home Assistant not configured.\" }, 400);\n\t}\n\n\tconst results = {\n\t\tbaseUrl: c.env.HASSIO_ENDPOINT_URI,\n\t\tendpoints: {} as Record<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\tstatus: number | string;\n\t\t\t\tavailable: boolean;\n\t\t\t\tcontentType?: string | null;\n\t\t\t\tsampleCount?: number;\n\t\t\t\terror?: string;\n\t\t\t}\n\t\t>,\n\t};\n\n\t// Test various common endpoints\n\tconst endpointsToTest = [\n\t\t{ name: \"api\", path: \"/api/\" },\n\t\t{ name: \"config\", path: \"/api/config\" },\n\t\t{ name: \"states\", path: \"/api/states\" },\n\t\t{ name: \"device_registry\", path: \"/api/config/device_registry/list\" },\n\t\t{ name: \"entity_registry\", path: \"/api/config/entity_registry/list\" },\n\t\t{ name: \"services\", path: \"/api/services\" },\n\t\t{ name: \"events\", path: \"/api/events\" },\n\t];\n\n\tfor (const endpoint of endpointsToTest) {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t`${c.env.HASSIO_ENDPOINT_URI}${endpoint.path}`,\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t},\n\t\t\t\t\tsignal: AbortSignal.timeout(5000),\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tresults.endpoints[endpoint.name] = {\n\t\t\t\tstatus: response.status,\n\t\t\t\tavailable: response.ok,\n\t\t\t\tcontentType: response.headers.get(\"content-type\"),\n\t\t\t};\n\n\t\t\t// For some endpoints, get a sample of the data\n\t\t\tif (response.ok && endpoint.name === \"states\") {\n\t\t\t\ttry {\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tresults.endpoints[endpoint.name].sampleCount = Array.isArray(data)\n\t\t\t\t\t\t? data.length\n\t\t\t\t\t\t: 0;\n\t\t\t\t} catch {}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tresults.endpoints[endpoint.name] = {\n\t\t\t\tstatus: \"error\",\n\t\t\t\tavailable: false,\n\t\t\t\terror: error instanceof Error ? error.message : \"Unknown error\",\n\t\t\t};\n\t\t}\n\t}\n\n\treturn c.json(ok(\"Home Assistant API diagnostics completed\", results));\n});\n\n// Real-time event subscription endpoint\nv1.post(\"/ha/events/subscribe\", async (c) => {\n\tlogger.debug(\"ha events subscribe requested\");\n\n\t// Check if Home Assistant is configured\n\tif (!c.env.HASSIO_ENDPOINT_URI || !c.env.HASSIO_TOKEN) {\n\t\treturn c.json({ ok: false, error: \"Home Assistant not configured.\" }, 400);\n\t}\n\n\ttry {\n\t\tconst { event_type } = await c.req.json<{ event_type?: string }>();\n\n\t\tconst wsClient = getHaClient(c.env);\n\t\tconst subscription = await wsClient.subscribeEvents(event_type);\n\n\t\tlogger.debug(`Subscribed to Home Assistant events: ${event_type || \"all\"}`);\n\n\t\treturn c.json(\n\t\t\tok(\"event subscription created\", {\n\t\t\t\tevent_type: event_type || \"all\",\n\t\t\t\tsubscription_id:\n\t\t\t\t\ttypeof subscription === \"object\" &&\n\t\t\t\t\tsubscription &&\n\t\t\t\t\t\"id\" in subscription\n\t\t\t\t\t\t? subscription.id\n\t\t\t\t\t\t: \"unknown\",\n\t\t\t}),\n\t\t\t\t);\n\t} catch (error) {\n\t\tlogger.error(\"Event subscription error:\", error);\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: `Event subscription failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n\t\t\t},\n\t\t\t500,\n\t\t);\n\t}\n});\n\n// WebSocket monitoring endpoint\nv1.get(\"/websocket/events\", async (c) => {\n\tlogger.debug(\"WebSocket events requested\");\n\n\tif (!c.env.HASSIO_ENDPOINT_URI || !c.env.HASSIO_TOKEN) {\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: \"Home Assistant not configured\",\n\t\t\t},\n\t\t\t400,\n\t\t);\n\t}\n\n\ttry {\n\t\t// Get recent state changes to simulate event monitoring\n\t\tconst statesRes = await fetch(`${c.env.HASSIO_ENDPOINT_URI}/api/states`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t});\n\n\t\tif (!statesRes.ok) {\n\t\t\tthrow new Error(`States fetch failed: ${statesRes.status}`);\n\t\t}\n\n\t\tconst states = await statesRes.json();\n\n\t\tinterface RecentEvent {\n\t\t\ttime: string;\n\t\t\tentity_id: string;\n\t\t\tevent_type: string;\n\t\t\told_state: string | null;\n\t\t\tnew_state: string;\n\t\t\tfriendly_name: string;\n\t\t\tdomain: string;\n\t\t\tage_minutes: number;\n\t\t}\n\n\t\tconst recentEvents: RecentEvent[] = [];\n\n\t\t// Convert recent state changes to event-like format\n\t\tif (Array.isArray(states)) {\n\t\t\tconst now = new Date();\n\t\t\tstates\n\t\t\t\t.filter(state => state.last_changed || state.last_updated)\n\t\t\t\t.sort((a, b) => {\n\t\t\t\t\tconst aTime = new Date(a.last_changed || a.last_updated).getTime();\n\t\t\t\t\tconst bTime = new Date(b.last_changed || b.last_updated).getTime();\n\t\t\t\t\treturn bTime - aTime;\n\t\t\t\t})\n\t\t\t\t.slice(0, 10) // Get last 10 events\n\t\t\t\t.forEach(state => {\n\t\t\t\t\tconst lastChanged = new Date(state.last_changed || state.last_updated);\n\t\t\t\t\tconst ageMinutes = Math.round((now.getTime() - lastChanged.getTime()) / 1000 / 60);\n\n\t\t\t\t\tif (ageMinutes < 60) { // Only show events from last hour\n\t\t\t\t\t\trecentEvents.push({\n\t\t\t\t\t\t\ttime: lastChanged.toISOString(),\n\t\t\t\t\t\t\tentity_id: state.entity_id,\n\t\t\t\t\t\t\tevent_type: 'state_changed',\n\t\t\t\t\t\t\told_state: null, // We don't have old state from this endpoint\n\t\t\t\t\t\t\tnew_state: state.state,\n\t\t\t\t\t\t\tfriendly_name: state.attributes?.friendly_name || state.entity_id,\n\t\t\t\t\t\t\tdomain: state.entity_id.split('.')[0],\n\t\t\t\t\t\t\tage_minutes: ageMinutes,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\treturn c.json(\n\t\t\tok(\"recent events\", {\n\t\t\t\tevents: recentEvents,\n\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\tcount: recentEvents.length,\n\t\t\t}),\n\t\t);\n\t} catch (error) {\n\t\tlogger.error(\"WebSocket events fetch failed:\", error);\n\t\treturn c.json(\n\t\t\t{\n\t\t\t\tok: false,\n\t\t\t\terror: `WebSocket events failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n\t\t\t},\n\t\t\t500,\n\t\t);\n\t}\n});\n\n/**\n * Sync entities from Home Assistant to database\n */\nasync function syncEntitiesFromHA(\n\tdb: D1Database,\n\thassioEndpoint: string,\n\thassioToken: string,\n): Promise<{ synced: number; errors: number }> {\n\tlogger.debug(\"Syncing entities from Home Assistant to database\");\n\n\ttry {\n\t\t// Get all entity states from Home Assistant\n\t\tconst statesRes = await fetch(`${hassioEndpoint}/api/states`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${hassioToken}`,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t});\n\n\t\tif (!statesRes.ok) {\n\t\t\tthrow new Error(`States fetch failed: ${statesRes.status}`);\n\t\t}\n\n\t\tconst states = await statesRes.json();\n\t\tif (!Array.isArray(states)) {\n\t\t\tthrow new Error(\"Invalid states response from Home Assistant\");\n\t\t}\n\n\t\t// Ensure we have a default source\n\t\tawait db.prepare(`\n\t\t\tINSERT OR IGNORE INTO sources (id, kind, base_ws_url, created_at, updated_at)\n\t\t\tVALUES ('default', 'home_assistant', ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n\t\t`).bind(hassioEndpoint.replace(/^http/, 'ws') + '/api/websocket').run();\n\n\t\tlet synced = 0;\n\t\tlet errors = 0;\n\n\t\t// Process each entity state\n\t\tfor (const state of states) {\n\t\t\ttry {\n\t\t\t\tif (!state.entity_id) continue;\n\n\t\t\t\tconst [domain, object_id] = state.entity_id.split('.', 2);\n\t\t\t\tif (!domain || !object_id) continue;\n\n\t\t\t\tconst friendlyName = state.attributes?.friendly_name || null;\n\t\t\t\tconst icon = state.attributes?.icon || null;\n\t\t\t\tconst unitOfMeasure = state.attributes?.unit_of_measurement || null;\n\t\t\t\tconst area = state.attributes?.area_id || null;\n\n\t\t\t\t// Insert or update entity\n\t\t\t\tawait db.prepare(`\n\t\t\t\t\tINSERT OR REPLACE INTO entities (\n\t\t\t\t\t\tid, source_id, domain, object_id, friendly_name, icon,\n\t\t\t\t\t\tunit_of_measure, area, is_enabled, last_seen_at,\n\t\t\t\t\t\tmetadata_json, updated_at\n\t\t\t\t\t) VALUES (?, 'default', ?, ?, ?, ?, ?, ?, 1, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP)\n\t\t\t\t`).bind(\n\t\t\t\t\tstate.entity_id,\n\t\t\t\t\tdomain,\n\t\t\t\t\tobject_id,\n\t\t\t\t\tfriendlyName,\n\t\t\t\t\ticon,\n\t\t\t\t\tunitOfMeasure,\n\t\t\t\t\tarea,\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\tunique_id: state.attributes?.unique_id,\n\t\t\t\t\t\tdevice_id: state.attributes?.device_id,\n\t\t\t\t\t\tdevice_class: state.attributes?.device_class,\n\t\t\t\t\t\tentity_category: state.attributes?.entity_category,\n\t\t\t\t\t})\n\t\t\t\t).run();\n\n\t\t\t\tsynced++;\n\t\t\t} catch (entityError) {\n\t\t\t\tlogger.error(`Failed to sync entity ${state.entity_id}:`, entityError);\n\t\t\t\terrors++;\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`Entity sync complete: ${synced} synced, ${errors} errors`);\n\t\treturn { synced, errors };\n\t} catch (error) {\n\t\tlogger.error(\"Entity sync failed:\", error);\n\t\tthrow error;\n\t}\n}\n", "import type { WorkerEnv } from '../index';\nimport { getInstanceConfig } from '../lib/homeAssistant';\nimport { logger } from '../lib/logger';\n\nexport class HomeAssistantWebSocket implements DurableObject {\n  private env: WorkerEnv;\n  private haSocket?: WebSocket;\n  private clients = new Set<WebSocket>();\n\n  constructor(env: WorkerEnv) {\n    this.env = env;\n  }\n\n  async fetch(request: Request) {\n    if (request.headers.get('Upgrade') !== 'websocket') {\n      logger.warn('Non-websocket request to HomeAssistantWebSocket');\n      return new Response('Expected websocket', { status: 400 });\n    }\n\n    const url = new URL(request.url);\n    const instanceId = url.pathname.split('/').pop() || 'default';\n    logger.debug('HomeAssistantWebSocket fetch for', instanceId);\n    await this.ensureHaSocket(instanceId);\n\n    const pair = new WebSocketPair();\n    const { 0: client, 1: server } = pair;\n\n    server.accept?.();\n\n    this.clients.add(server);\n    server.addEventListener('message', (ev: MessageEvent) => {\n      try {\n        this.haSocket?.send(ev.data);\n      } catch {}\n    });\n    const remove = () => {\n      this.clients.delete(server);\n    };\n    server.addEventListener('close', remove);\n    server.addEventListener('error', remove);\n\n    return new Response(null, { status: 101, webSocket: client });\n  }\n\n  private async ensureHaSocket(instanceId: string) {\n    if (this.haSocket && this.haSocket.readyState <= 1) return;\n\n    const config = this.env.HASSIO_ENDPOINT_URI && this.env.HASSIO_TOKEN\n      ? { baseUrl: this.env.HASSIO_ENDPOINT_URI, token: this.env.HASSIO_TOKEN }\n      : await getInstanceConfig(this.env, instanceId);\n    if (!config) {\n      logger.warn('No HA config found for instance', instanceId);\n      return;\n    }\n\n    const wsUrl = `${config.baseUrl.replace(/^http/, 'ws')}/api/websocket`;\n    this.haSocket = new WebSocket(wsUrl);\n    logger.debug('Opening HA socket', wsUrl);\n    this.haSocket.addEventListener('open', () => {\n      if (this.haSocket) {\n        this.haSocket.send(\n          JSON.stringify({ type: 'auth', access_token: config.token })\n        );\n      }\n    });\n    this.haSocket.addEventListener('message', (ev) => {\n      for (const client of this.clients) {\n        try {\n          client.send(ev.data);\n        } catch {}\n      }\n    });\n    this.haSocket.addEventListener('close', () => {\n      logger.warn('HA socket closed');\n      this.haSocket = undefined;\n    });\n    this.haSocket.addEventListener('error', () => {\n      logger.error('HA socket error');\n      this.haSocket = undefined;\n    });\n  }\n}", "/**\n * @file src/index.ts\n * @description This is the main entry point for the Cloudflare Worker.\n * It sets up a Hono web server to handle incoming HTTP requests,\n * proxies WebSocket connections to a Durable Object, serves static assets,\n * and provides health check and OpenAPI specification endpoints.\n * @module src/index\n */\n\nimport { Hono } from \"hono\";\nimport { brainSweep } from \"./lib/brain\";\nimport { HaWebSocketClient } from \"./lib/homeAssistantWs\";\nimport { logger } from \"./lib/logger\";\nimport { v1 } from \"./routes/v1\";\n\n// Export the Durable Object class with the name expected by wrangler.toml\nexport { HomeAssistantWebSocket } from \"./durable-objects/homeAssistant\";\n\n/**\n * @interface WorkerEnv\n * @description Extends the generated Env interface with additional environment variables\n * specific to this worker.\n * @property {string} HASSIO_ENDPOINT_URI - The endpoint URI for the Home Assistant instance.\n * @property {string} HASSIO_TOKEN - The long-lived access token for Home Assistant.\n * @property {string} DEFAULT_TEXT_MODEL - The default AI model for text generation.\n * @property {string} DEFAULT_OBJECT_MODEL - The default AI model for object detection.\n * @property {string} DEFAULT_FACE_MODEL - The default AI model for face detection.\n * @property {string} DEFAULT_VISION_MODEL - The default AI model for vision analysis.\n */\nexport interface WorkerEnv\n\textends Omit<\n\t\tEnv,\n\t\t| \"DEFAULT_TEXT_MODEL\"\n\t\t| \"DEFAULT_OBJECT_MODEL\"\n\t\t| \"DEFAULT_FACE_MODEL\"\n\t\t| \"DEFAULT_VISION_MODEL\"\n\t> {\n\tHASSIO_ENDPOINT_URI: string;\n\tHASSIO_TOKEN: string;\n\tDEFAULT_TEXT_MODEL: string;\n\tDEFAULT_OBJECT_MODEL: string;\n\tDEFAULT_FACE_MODEL: string;\n\tDEFAULT_VISION_MODEL: string;\n}\n\n/**\n * @constant {number} startTime\n * @description Records the timestamp (in milliseconds) when the worker instance is initialized.\n * This is used to calculate the uptime of the worker instance.\n */\nconst startTime = Date.now();\n\n/**\n * @constant {Hono} app\n * @description An instance of the Hono web framework, typed with the Worker's environment bindings.\n * This object is used to define routes and middleware for the application.\n */\nconst app = new Hono<{ Bindings: WorkerEnv }>();\n\n/**\n * @middleware\n * @description A simple logging middleware that logs the method and path of every incoming request.\n */\napp.use(\"*\", async (c, next) => {\n\tlogger.debug(\"Request:\", c.req.method, c.req.path);\n\tawait next();\n});\n\n/**\n * @route {GET} /health\n * @description Provides a health check endpoint for monitoring the worker's status.\n * It returns the worker's uptime, status, and Home Assistant connectivity status.\n * @returns {Response} JSON response with `ok`, `uptime`, `env.ready`, and `homeAssistant` status.\n */\napp.get(\"/health\", async (c) => {\n\tlogger.debug(\"Handling /health\");\n\tconst uptime = (Date.now() - startTime) / 1000;\n\n\t// Check if Home Assistant credentials are configured\n\tconst hasCredentials = !!(c.env.HASSIO_ENDPOINT_URI && c.env.HASSIO_TOKEN);\n\n\t// Check Home Assistant REST API connectivity\n\tlet restApiStatus = false;\n\tif (hasCredentials) {\n\t\ttry {\n\t\t\tconst restResponse = await fetch(`${c.env.HASSIO_ENDPOINT_URI}/api/`, {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t\tsignal: AbortSignal.timeout(5000), // 5 second timeout\n\t\t\t});\n\t\t\trestApiStatus = restResponse.ok;\n\t\t} catch (error) {\n\t\t\tlogger.debug(\"Home Assistant REST API check failed:\", error);\n\t\t\trestApiStatus = false;\n\t\t}\n\t}\n\n\t// Check Home Assistant WebSocket API connectivity\n\tlet websocketApiStatus = false;\n\tif (hasCredentials) {\n\t\ttry {\n\t\t\t// Create a fresh WebSocket client instance for health checks to avoid connection pooling issues\n\t\t\tconst healthCheckClient = new HaWebSocketClient(\n\t\t\t\tc.env.HASSIO_ENDPOINT_URI,\n\t\t\t\tc.env.HASSIO_TOKEN,\n\t\t\t);\n\t\t\tconst configResponse = await Promise.race([\n\t\t\t\thealthCheckClient.getConfig(),\n\t\t\t\tnew Promise((_, reject) =>\n\t\t\t\t\tsetTimeout(() => reject(new Error(\"WebSocket timeout\")), 3000),\n\t\t\t\t),\n\t\t\t]);\n\t\t\twebsocketApiStatus = !!configResponse;\n\t\t} catch (error) {\n\t\t\tlogger.debug(\"Home Assistant WebSocket API check failed:\", error);\n\t\t\twebsocketApiStatus = false;\n\t\t}\n\t}\n\n\treturn c.json({\n\t\tok: true,\n\t\tuptime,\n\t\tenv: { ready: true },\n\t\thomeAssistant: {\n\t\t\trestApi: restApiStatus,\n\t\t\twebsocketApi: websocketApiStatus,\n\t\t\tconfigured: hasCredentials,\n\t\t},\n\t});\n});\n\n/**\n * @route {GET} /\n * @description Serves the main `index.html` page from the static assets service.\n * Provides a fallback text response if the asset fetch fails.\n * @returns {Promise<Response>} The HTML page or a plain text fallback.\n */\napp.get(\"/\", async (c) => {\n\tlogger.debug(\"Handling root path\");\n\ttry {\n\t\treturn await c.env.ASSETS.fetch(\n\t\t\tnew Request(new URL(\"/index.html\", c.req.url)),\n\t\t);\n\t} catch (error) {\n\t\tlogger.warn(`Failed to fetch index.html, returning default text`, error);\n\t\treturn c.text(\n\t\t\t`hassio-proxy-worker up. See /openapi.json and /v1/* for API documentation. Error details: ${error}`,\n\t\t);\n\t}\n});\n\n/**\n * @route {GET} /openapi.json\n * @description Serves the OpenAPI 3.1 specification from the static assets service.\n * @returns {Promise<Response>} The JSON file containing the OpenAPI specification.\n */\napp.get(\"/openapi.json\", async (c) => {\n\tlogger.debug(\"Serving OpenAPI spec from ASSETS\");\n\ttry {\n\t\t// Forward the request to the ASSETS service to fetch the openapi.json file.\n\t\treturn await c.env.ASSETS.fetch(\n\t\t\tnew Request(new URL(\"/openapi.json\", c.req.url)),\n\t\t);\n\t} catch (error) {\n\t\t// Log the error and return a 500 response if the asset cannot be fetched.\n\t\tlogger.error(\"Failed to fetch openapi.json from ASSETS\", error);\n\t\treturn c.json(\n\t\t\t{ ok: false, error: \"Failed to load OpenAPI specification.\" },\n\t\t\t500,\n\t\t);\n\t}\n});\n\n/**\n * @route {GET} /api/camera_proxy/:entity_id\n * @description Proxies camera image requests to Home Assistant\n * This allows the dashboard to display camera feeds by forwarding requests to HA\n * @param {string} entity_id - The camera entity ID (e.g., \"camera.front_door\")\n * @returns {Promise<Response>} The camera image from Home Assistant\n */\napp.get(\"/api/camera_proxy/:entity_id\", async (c) => {\n\tconst { entity_id } = c.req.param();\n\tlogger.debug(\"Proxying camera image for\", entity_id);\n\n\t// Check if Home Assistant is configured\n\tif (!c.env.HASSIO_ENDPOINT_URI || !c.env.HASSIO_TOKEN) {\n\t\treturn c.json({ ok: false, error: \"Home Assistant not configured\" }, 400);\n\t}\n\n\ttry {\n\t\t// Forward the request to Home Assistant's camera proxy endpoint\n\t\tconst response = await fetch(\n\t\t\t`${c.env.HASSIO_ENDPOINT_URI}/api/camera_proxy/${entity_id}`,\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${c.env.HASSIO_TOKEN}`,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!response.ok) {\n\t\t\tlogger.debug(`Camera proxy failed for ${entity_id}: ${response.status}`);\n\t\t\treturn new Response(\"Camera unavailable\", { status: 404 });\n\t\t}\n\n\t\t// Return the image with appropriate headers\n\t\treturn new Response(response.body, {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": response.headers.get(\"Content-Type\") || \"image/jpeg\",\n\t\t\t\t\"Cache-Control\": \"no-cache\",\n\t\t\t},\n\t\t});\n\t} catch (error) {\n\t\tlogger.error(\"Camera proxy error:\", error);\n\t\treturn new Response(\"Camera error\", { status: 500 });\n\t}\n});\n\n/**\n * @description Mounts the v1 router group under the `/v1` path.\n * All routes defined in `src/routes/v1.ts` will be prefixed with `/v1`.\n */\napp.route(\"/v1\", v1);\n\n/**\n * @route {GET} /ws/:instanceId\n * @description Handles WebSocket upgrade requests and proxies them to the appropriate\n * HomeAssistantWebSocket Durable Object instance based on the `instanceId`.\n * @param {string} instanceId - The unique identifier for the WebSocket instance.\n * @returns {Promise<Response>} A response that establishes the WebSocket connection via the Durable Object.\n */\napp.get(\"/ws/:instanceId\", (c) => {\n\tconst { instanceId } = c.req.param();\n\tlogger.debug(\"Proxying WebSocket for instance\", instanceId);\n\tconst id = c.env.WEBSOCKET_SERVER.idFromName(instanceId);\n\tconst stub = c.env.WEBSOCKET_SERVER.get(id);\n\treturn stub.fetch(c.req.raw);\n});\n\n/**\n * @default\n * @description The default export of the module, which is an ExportedHandler object\n * that includes both fetch and scheduled handlers.\n * The Cloudflare Workers runtime uses this to handle incoming events.\n */\nexport default {\n\tasync fetch(\n\t\trequest: Request,\n\t\tenv: WorkerEnv,\n\t\tctx: ExecutionContext,\n\t): Promise<Response> {\n\t\treturn app.fetch(request, env, ctx);\n\t},\n\n\tasync scheduled(\n\t\tcontroller: ScheduledController,\n\t\tenv: WorkerEnv,\n\t\tctx: ExecutionContext,\n\t): Promise<void> {\n\t\tlogger.info(\"\uD83E\uDDE0 Scheduled brain sweep triggered\", {\n\t\t\tcron: controller.cron,\n\t\t\tscheduledTime: controller.scheduledTime,\n\t\t});\n\n\t\t// Run brain sweep in background\n\t\tctx.waitUntil(\n\t\t\tbrainSweep(env.D1_DB)\n\t\t\t\t.then((result) => {\n\t\t\t\t\tlogger.info(\"\uD83E\uDDE0 Scheduled brain sweep completed\", result);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tlogger.error(\"\uD83E\uDDE0 Scheduled brain sweep failed\", error);\n\t\t\t\t}),\n\t\t);\n\t},\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Volumes/Projects/workers/hassio-proxy-worker/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Volumes/Projects/workers/hassio-proxy-worker/node_modules/.pnpm/wrangler@4.32.0_@cloudflare+workers-types@4.20250823.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Volumes/Projects/workers/hassio-proxy-worker/node_modules/.pnpm/wrangler@4.32.0_@cloudflare+workers-types@4.20250823.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Volumes/Projects/workers/hassio-proxy-worker/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Volumes/Projects/workers/hassio-proxy-worker/.wrangler/tmp/bundle-QAtZyj/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Volumes/Projects/workers/hassio-proxy-worker/node_modules/.pnpm/wrangler@4.32.0_@cloudflare+workers-types@4.20250823.0/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Volumes/Projects/workers/hassio-proxy-worker/.wrangler/tmp/bundle-QAtZyj/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Volumes/Projects/workers/hassio-proxy-worker/.wrangler/tmp/bundle-QAtZyj/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["raw", "app", "Node", "Node", "Hono", "raw", "log", "Hono", "streamUrl", "c", "log", "client", "Hono"]
}
